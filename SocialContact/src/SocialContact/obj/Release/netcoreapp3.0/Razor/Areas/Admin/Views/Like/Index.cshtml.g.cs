#pragma checksum "E:\work\program\SocialContact\src\SocialContact\Areas\Admin\Views\Like\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "e711f424a5d957c1c36936e1815653ef4364c9f5"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Areas_Admin_Views_Like_Index), @"mvc.1.0.view", @"/Areas/Admin/Views/Like/Index.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"e711f424a5d957c1c36936e1815653ef4364c9f5", @"/Areas/Admin/Views/Like/Index.cshtml")]
    public class Areas_Admin_Views_Like_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper;
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral("<!DOCTYPE html>\r\n\r\n<html>\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("head", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "e711f424a5d957c1c36936e1815653ef4364c9f52763", async() => {
                WriteLiteral(@"
    <meta charset=""utf-8"">
    <meta http-equiv=""X-UA-Compatible"" content=""IE=edge,chrome=1"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no"">
    <link rel=""icon"" href=""/favicon.ico"">
    <title>爱好列表</title>
    <!-- 引入样式 -->
    <link rel=""stylesheet"" href=""https://unpkg.com/element-ui/lib/theme-chalk/index.css"">
    <style>
        .demo-form-inline {
            margin: 0px 70px;
            text-align: left;
        }
    </style>
");
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("body", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "e711f424a5d957c1c36936e1815653ef4364c9f54258", async() => {
                WriteLiteral(@"
    <div class=""like_list"">

        <!-- 开始查询信息 -->
        <el-form :inline=""true"" :model=""formQuery"" ref=""formQuery"" class=""demo-form-inline "">
            <el-form-item label=""爱好分类"" prop=""id"">
                <el-select v-model=""formQuery.id"" placeholder=""请选择"" ");
                WriteLiteral("@change=\"handleCategoryQueryChangeEvent\" clearable ");
                WriteLiteral(@"@visible-change=""handleCategoryQueryVisableChangeEvent"">
                    <el-option v-for=""it in options"" :key=""it.id"" :label=""it.category"" :value=""it.id"">
                    </el-option>
                </el-select>
            </el-form-item>
            <el-form-item label=""爱好名称"" prop=""category"">
                <el-input v-model=""formQuery.category"" placeholder=""爱好名称""></el-input>
            </el-form-item>
            <el-form-item label=""创建时间范围"" prop=""create_date"">
                <el-date-picker v-model=""formQuery.create_date"" type=""datetimerange"" value-format=""yyyy-MM-dd HH:mm:ss"" :picker-options=""createDatePickerOptions""
                                range-separator=""至"" start-placeholder=""开始日期"" align=""right"">
                </el-date-picker>
            </el-form-item>
            <el-form-item label=""修改时间范围"" prop=""update_date"">
                <el-date-picker v-model=""formQuery.update_date"" type=""datetimerange"" value-format=""yyyy-MM-dd HH:mm:ss"" :picker-options=""createDatePicke");
                WriteLiteral(@"rOptions"" range-separator=""至"" start-placeholder=""开始日期""
                                end-placeholder=""结束日期"" align=""right"">
                </el-date-picker>
            </el-form-item>
            <el-form-item>
                <el-button type=""primary"" ");
                WriteLiteral("@click=\"loadTableDataOrQueryDataEvent\">查询</el-button>\r\n                <el-button ");
                WriteLiteral("@click=\"resetFormEvent(\'formQuery\')\">重置</el-button>\r\n            </el-form-item>\r\n        </el-form>\r\n        <!-- 结束查询信息 -->\r\n        <!-- 开始 操作按钮 -->\r\n        <div style=\"margin-top: 20px;text-align:left;margin-bottom:10px\">\r\n            <el-button ");
                WriteLiteral("@click=\"toggleSelectionTableCheckBoxButtonEvent(checkboxAllSelect?tableData:null)\">{{checkboxAllSelectText}}</el-button>\r\n            <el-button ");
                WriteLiteral("@click=\"insertButtonClickEvent\" v-if=\"operator.add\" icon=\"el-icon-plus\">添加</el-button>\r\n            <el-button ");
                WriteLiteral("@click=\"modifyButtonClickEvent\" v-if=\"operator.modify\" icon=\"el-icon-edit\">编辑</el-button>\r\n            <el-button ");
                WriteLiteral("@click=\"deleteButtonClickEvent\" v-if=\"operator.delete\" icon=\"el-icon-delete\">删除</el-button>\r\n            <el-button ");
                WriteLiteral("@click=\"queryButtonClickEvent\" icon=\"el-icon-view\">查看</el-button>\r\n            <el-button ");
                WriteLiteral(@"@click=""loadTableDataOrQueryDataEvent"" icon=""el-icon-refresh"">刷新</el-button>
        </div>
        <!-- 结束 操作按钮 -->
        <!-- 开始 列表信息 -->
        <el-table v-loading=""loading"" element-loading-spinner=""el-icon-loading"" element-loading-background=""rgba(0, 0, 0, 0.8)"" ref=""multipleTable"" :data=""tableData"" tooltip-effect=""dark""
                  highlight-current-row border ");
                WriteLiteral(@"@selection-change=""handleSelectionChange"" :default-sort=""{prop: 'create_date', order: 'descending'}"">
            <el-table-column type=""selection"" width=""55"" align=""center""> </el-table-column>

            <el-table-column type=""index"" width=""50"" sortable label=""序号"" align=""center""> </el-table-column>
            <el-table-column prop=""id"" label=""编号"" sortable width=""70"" align=""center"">  </el-table-column>
            <el-table-column prop=""category.category"" label=""名称"" width=""100"" align=""center""> </el-table-column>
            <el-table-column prop=""category.description"" label=""描述"" width=""200"" align=""center""> </el-table-column>
            <el-table-column prop=""create_date"" label=""创建日期"" sortable width=""200"" align=""center""> </el-table-column>
            <el-table-column prop=""update_date"" label=""修改日期"" sortable width=""200"" align=""center""> </el-table-column>
            <el-table-column label=""操作"" width=""200"" align=""center"">
                <template slot-scope=""scope"">
                    <el-butto");
                WriteLiteral("n ");
                WriteLiteral("@click=\"handleSelectClickEvent(scope.row)\" type=\"text\" icon=\"el-icon-view\" size=\"small\">查看</el-button>\r\n                    <el-button type=\"text\" ");
                WriteLiteral("@click=\"handleModifyClickEvent(scope.row)\" v-if=\"operator.modify\" icon=\"el-icon-edit\" size=\"small\">编辑</el-button>\r\n                    <el-button type=\"text\" ");
                WriteLiteral(@"@click=""handleDeleteClickEvent(scope.row)"" v-if=""operator.delete"" icon=""el-icon-delete"" size=""small"">删除</el-button>
                </template>
            </el-table-column>
        </el-table>
        <!-- 结束 列表信息 -->
        <!-- 开始 分页 -->
        <div class=""block"" style=""text-align:center;"">
            <el-pagination background ");
                WriteLiteral("@size-change=\"handleSizeChangeEvent\" ");
                WriteLiteral(@"@current-change=""handleCurrentPageChangeEvent"" :current-page=""page.current_page""
                           :page-sizes=""page.sizes"" :page-size=""page.size"" :page-count=""page.page"" layout=""total, sizes, prev, pager, next, jumper"" :total=""page.total"">
            </el-pagination>
        </div>
        <!-- 结束 分页 -->
        <!-- 开始 添加 修改 -->
        <el-dialog :title=""dialog.title"" :visible.sync=""dialog.visible"" width=""30%"" :before-close=""handleDialogClose"">
            <el-radio-group v-model=""labelPosition"" size=""small"">
                <el-radio-button label=""left"">左对齐</el-radio-button>
                <el-radio-button label=""right"">右对齐</el-radio-button>
                <el-radio-button label=""top"">顶部对齐</el-radio-button>
            </el-radio-group>
            <div style=""margin: 20px;""></div>
            <el-form :model=""formSubmit"" status-icon :rules=""formRoleValidator"" :disabled=""disabled"" ref=""formSubmit"" class=""demo-ruleForm"" :label-position=""labelPosition"" label-width=""80px"">
         ");
                WriteLiteral(@"       <el-input type=""hidden"" v-model=""formSubmit.id""></el-input>
                <template v-if=""test"">
                    <el-form-item label=""分类"" prop=""category.id"">
                        <el-select v-model=""formSubmit.category.id"" filterable placeholder=""请选择"" ");
                WriteLiteral("@change=\"handleLikeCategoryChangeEvent\" ");
                WriteLiteral(@"@visible-change=""handleLikeCategoryVisableChangeEvent"">
                            <el-option v-for=""item in category_options"" :key=""item.id""
                                       :label=""item.category"" :value=""item.id"">
                            </el-option>
                        </el-select>
                    </el-form-item>
                </template>
                <el-form-item label=""用户"" prop=""user.id"">
                    <el-select v-model=""formSubmit.user.id"" filterable placeholder=""请选择"" ");
                WriteLiteral("@change=\"handleUserChangeEvent\" ");
                WriteLiteral(@"@visible-change=""handleUserVisableChangeEvent"">
                        <el-option v-for=""item in user_options"" :key=""item.id""
                                   :label=""item.category"" :value=""item.id"">
                        </el-option>
                    </el-select>
                </el-form-item>
                <el-form-item>
                    <el-button type=""primary"" ");
                WriteLiteral("@click=\"submitFormEvent(\'formSubmit\')\">{{dialog.submitText}}</el-button>\r\n                    <el-button ");
                WriteLiteral(@"@click=""resetFormEvent('formSubmit')"">{{dialog.resetText}}</el-button>
                </el-form-item>
            </el-form>
        </el-dialog>
        <!-- 结束 添加 修改 -->

    </div>
    <!-- import Vue before Element -->
    <script src=""https://unpkg.com/vue/dist/vue.js""></script>
    <!-- import JavaScript -->
    <script src=""https://unpkg.com/element-ui/lib/index.js""></script>
    <script src=""https://unpkg.com/axios/dist/axios.min.js""></script>
    <script src=""/js/js.cookie.js""></script>
    <script src=""/js/index.js""></script>
    <script>
        var obj = new Gibson();
        obj.el = "".like_list"";
        obj.data.operatorUrl = { add: urls.like.add, modify: urls.like.edit, delete: urls.like.delete, query: urls.like.query };
        obj.data.formQuery = { id: '', category: '', create_date: [], update_date: [] };
        obj.data.formSubmit = { id: '', category: { id: '' }, user: { id: '' } };
        obj.data.controller = ""like"";
        obj.data.options = [];
        obj.da");
                WriteLiteral(@"ta.isOperatorRequest = true;
        obj.data.formRoleValidator = {

        };
        //覆盖此方法 重写
        obj.methods.loadMounted = function () {
            this.queryCategoryEvent();
            this.userCategoryQueryEvent();
            this.likeCategoryQueryEvent();
        };
        obj.methods.reload = function () {
            this.queryCategoryEvent();
        };
        //测试用的
        //if (obj.data.test) {
        obj.data.formSubmit.user = { id: '' };
        obj.data.user_options = [];
        obj.methods.userCategoryQueryEvent = function () {
            var $this = this;
            get(urls.user.category, function (response) {
                if (response.data.success) {
                    $this.user_options = response.data.data;
                }
            });
        };
        obj.methods.handleUserChangeEvent = function (val) {
            this.formSubmit.user.id = val;
        };
        obj.methods.handleUserVisableChangeEvent = function (val) {
         ");
                WriteLiteral(@"   if (val) {
                this.userCategoryQueryEvent();
            }
        };
        // }
        obj.data.category_options = [];
        obj.methods.likeCategoryQueryEvent = function () {
            var $this = this;
            get(urls.likecategory.category, function (response) {
                if (response.data.success) {
                    $this.category_options = response.data.data;
                }
            });
        };
        obj.methods.handleLikeCategoryChangeEvent = function (val) {
            this.formSubmit.category.id = val;
        };
        obj.methods.handleLikeCategoryVisableChangeEvent = function (val) {
            if (val) {
                this.likeCategoryQueryEvent();
            }
        };
        //覆盖此方法 重写
        obj.methods.submitTextSelectChanngeEevent = function () {
            this.dialog.title = ""查看爱好信息"";
            this.disabled = true;
            this.dialog.submitText = ""预览爱好信息"";
        };
        //覆盖此方法 重写
        ob");
                WriteLiteral(@"j.methods.submitTextModifyChanngeEevent = function () {
            this.dialog.title = ""编辑爱好信息"";
            this.disabled = false;
            this.dialog.submitText = ""立即编辑"";
        };
        //覆盖此方法 重写
        obj.methods.submitTextInsertChanngeEevent = function () {
            this.dialog.title = ""添加爱好信息"";
            this.disabled = false;
            this.dialog.submitText = ""立即创建"";
        };
        //覆盖此方法 重写
        obj.methods.setValue = function (row) {
            for (var obj in this.formSubmit) {
                let str = obj.toString();
                if (str == 'category' || str == ""user"") {
                    continue;
                }
                if (row[obj]) this.formSubmit[obj] = row[obj];
            }
            if (this.test && row.user) this.formSubmit.user.id = row.user.id;
            if (row.category) this.formSubmit.category.id = row.category.id;
        };
        new Vue(obj);
    </script>

");
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n</html>\r\n");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
