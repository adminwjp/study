#pragma checksum "E:\work\program\SocialContact\src\SocialContact\Areas\Admin\Views\UserMenu\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "ca9094227758021e8a3329c687cc4092b8da1910"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Areas_Admin_Views_UserMenu_Index), @"mvc.1.0.view", @"/Areas/Admin/Views/UserMenu/Index.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"ca9094227758021e8a3329c687cc4092b8da1910", @"/Areas/Admin/Views/UserMenu/Index.cshtml")]
    public class Areas_Admin_Views_UserMenu_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper;
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral("<!DOCTYPE html>\r\n\r\n<html>\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("head", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "ca9094227758021e8a3329c687cc4092b8da19102783", async() => {
                WriteLiteral(@"
    <meta charset=""utf-8"">
    <meta http-equiv=""X-UA-Compatible"" content=""IE=edge,chrome=1"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no"">
    <link rel=""icon"" href=""/favicon.ico"">
    <title>用户菜单列表</title>
    <!-- 引入样式 -->
    <link rel=""stylesheet"" href=""https://unpkg.com/element-ui/lib/theme-chalk/index.css"">
    <style>
        .demo-form-inline {
            margin: 0px 70px;
            text-align: left;
        }
    </style>
");
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("body", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "ca9094227758021e8a3329c687cc4092b8da19104280", async() => {
                WriteLiteral(@"
    <div class=""user_menu_list"">

        <!-- 开始查询信息 -->
        <el-form :inline=""true"" :model=""formQuery"" ref=""formQuery"" class=""demo-form-inline "">
            <el-form-item label=""角色分类"" prop=""role_id"">
                <el-cascader v-model=""formQuery.role_id"" placeholder=""角色分类"" ref=""refHandleRoleQuery"" :options=""role_options""
                             :props=""{  checkStrictly: true,expandTrigger: 'hover' }"" ");
                WriteLiteral("@change=\"handleRoleQueryChangeEvent\" ");
                WriteLiteral("@visible-change=\"handleRoleVisableChangeEvent\" clearable>\r\n                    <template slot-scope=\"{ node, data }\">\r\n                        <span style=\"float: left\" ");
                WriteLiteral(@"@click=""handleRoleQueryClickEvent(data.value)"">{{ data.label }}</span>
                        <span v-if=""!node.isLeaf""> ({{ data.children.length }}) </span>
                    </template>
                </el-cascader>
            </el-form-item>
            <el-form-item label=""等级分类"" prop=""level_id"">
                <el-select v-model=""formQuery.level_id""
                           placeholder=""等级分类""
                           ");
                WriteLiteral("@change=\"handleRoleQueryChangeEvent\" ");
                WriteLiteral(@"@visible-change=""handleLevelVisableChangeEvent"" clearable>
                    <el-option v-for=""it in level_options"" :key=""it.id"" :label=""it.category"" :value=""it.id"">
                    </el-option>
                </el-select>
            </el-form-item>
            <el-form-item label=""菜单分类"" prop=""menu_id"">
                <el-cascader v-model=""formQuery.menu_id""
                             placeholder=""等级分类""
                             ");
                WriteLiteral("@change=\"handleMenuQueryChangeEvent\" ");
                WriteLiteral(@"@visible-change=""handleMenuVisableChangeEvent"" clearable>
                    <el-option v-for=""it in menu_options"" :key=""it.id"" :label=""it.category"" :value=""it.id"">
                    </el-option>
                </el-cascader>
            </el-form-item>
            <el-form-item label=""创建时间范围"" prop=""create_date"">
                <el-date-picker v-model=""formQuery.create_date"" type=""datetimerange"" value-format=""yyyy-MM-dd HH:mm:ss"" :picker-options=""createDatePickerOptions""
                                range-separator=""至"" start-placeholder=""开始日期"" align=""right"">
                </el-date-picker>
            </el-form-item>
            <el-form-item label=""修改时间范围"" prop=""update_date"">
                <el-date-picker v-model=""formQuery.update_date"" type=""datetimerange"" value-format=""yyyy-MM-dd HH:mm:ss"" :picker-options=""createDatePickerOptions"" range-separator=""至"" start-placeholder=""开始日期""
                                end-placeholder=""结束日期"" align=""right"">
                </el-date-picker>
   ");
                WriteLiteral("         </el-form-item>\r\n            <el-form-item>\r\n                <el-button type=\"primary\" ");
                WriteLiteral("@click=\"loadTableDataOrQueryDataEvent\">查询</el-button>\r\n                <el-button ");
                WriteLiteral(@"@click=""resetFormEvent('formQuery')"">重置</el-button>
            </el-form-item>
        </el-form>
        <!-- 结束查询信息 -->
        <!-- 开始 操作按钮 -->
        <div style=""margin-top: 20px;text-align:left;margin-bottom:10px"">
        </div>
        <!-- 结束 操作按钮 -->
        <!-- 开始 列表信息 -->
        <el-table v-loading=""loading"" element-loading-spinner=""el-icon-loading"" element-loading-background=""rgba(0, 0, 0, 0.8)"" ref=""multipleTable"" :data=""tableData"" tooltip-effect=""dark"" style=""width: 100%""
                  highlight-current-row row-key=""id"" border ");
                WriteLiteral(@"@selection-change=""handleSelectionChange"" :default-sort=""{prop: 'create_date', order: 'descending'}"">
            <el-table-column type=""index"" width=""50"" sortable label=""序号"" align=""center""> </el-table-column>
            <el-table-column prop=""id"" label=""编号"" sortable width=""100"" resizable align=""center"">  </el-table-column>
            <el-table-column prop=""role"" label=""角色信息"" width=""300"" align=""center"">
                <el-table-column prop=""role.value"" label=""角色编号"" width=""100"" align=""center""> </el-table-column>
                <el-table-column prop=""role.label"" label=""角色名称"" width=""100"" align=""center""> </el-table-column>
                <el-table-column prop=""role.description"" label=""角色描述"" width=""200"" align=""center""> </el-table-column>
            </el-table-column>

            <el-table-column prop=""admin.id"" label=""管理员编号"" sortable width=""200"" align=""center"">
                <template slot-scope=""scope"" v-if=""scope.row.admin"">
                    <el-popover trigger=""hover"" placement=""top"">
  ");
                WriteLiteral(@"                      <p>管理员编号: {{ scope.row.admin.id }}</p>
                        <p>账户: {{ scope.row.admin.account }}</p>
                        <p>昵称: {{ scope.row.admin.nick_name }}</p>
                        <p>姓名: {{ scope.row.admin.real_name }}</p>
                        <p>
                            出生日期:  <i class=""el-icon-time""></i>
                            <span style=""margin-left: 10px"">{{ scope.row.admin.birthday }}</span>
                        </p>
                        <p>
                        <p>
                            头像:<img v-if=""scope.row.admin.head_pic"" style=""margin-left:10px;margin-top:-5px;border-radius:50%;width:36px;height:36px;vertical-align:middle;"" :src=""baseUrl+'img/'+scope.row.admin.head_pic"" class=""avatar"">
                            <img v-else style=""margin-left:10px;margin-top:-5px;border-radius:50%;width:36px;height:36px;vertical-align:middle;"" src=""https://cube.elemecdn.com/e/fd/0fc7d20532fdaf769a25683617711png.png"" />
                   ");
                WriteLiteral(@"     </p>
                        <p>手机: {{ scope.row.admin.phone }}</p>
                        <p>性别: {{ scope.row.admin.sex }}</p>
                        <p>描述: {{ scope.row.admin.description }}</p>
                        <p>邮箱: {{ scope.row.admin.email }}</p>
                        <p>角色: {{ scope.row.admin.role }}</p>
                        <div slot=""reference"" class=""name-wrapper"">
                            <el-tag size=""medium"">{{ scope.row.admin.id }}</el-tag>
                        </div>
                    </el-popover>
                </template>
            </el-table-column>
            <el-table-column prop=""enable"" label=""启用"" sortable width=""100"" resizable align=""center"">
                <template slot-scope=""scope"">
                    <el-checkbox v-model=""scope.row.enable"" ");
                WriteLiteral(@"@change=""checkEd(scope.row.id,scope.row.enable,'enable')"">启用</el-checkbox>
                </template>
            </el-table-column>
            <el-table-column prop=""level"" label=""等级信息"" width=""300"" align=""center"">
                <el-table-column prop=""level.id"" label=""等级编号"" width=""120""></el-table-column>
                <el-table-column prop=""level.name"" label=""等级名称"" width=""120""></el-table-column>
            </el-table-column>
            <el-table-column prop=""menu"" label=""菜单信息"" width=""300"" align=""center"">
                <el-table-column prop=""menu.id"" label=""菜单编号"" width=""120""></el-table-column>
                <el-table-column prop=""menu.menu_name"" label=""菜单名称"" width=""120""></el-table-column>
                <el-table-column prop=""menu.href"" label=""菜单地址"" width=""120""></el-table-column>
            </el-table-column>
            <el-table-column prop=""add"" label=""增"" width=""120"">
                <template slot-scope=""scope"">
                    <el-checkbox v-model=""scope.row.add"" ");
                WriteLiteral(@"@change=""checkEd(scope.row.id,scope.row.add,'add')"">启用</el-checkbox>
                </template>
            </el-table-column>
            <el-table-column prop=""delete"" label=""删"" width=""120"">
                <template slot-scope=""scope"">
                    <el-checkbox v-model=""scope.row.delete"" ");
                WriteLiteral(@"@change=""checkEd(scope.row.id,scope.row.delete,'delete')"">启用</el-checkbox>
                </template>
            </el-table-column>
            <el-table-column prop=""modify"" label=""改"" width=""120"">
                <template slot-scope=""scope"">
                    <el-checkbox v-model=""scope.row.modify"" ");
                WriteLiteral(@"@change=""checkEd(scope.row.id,scope.row.modify,'modify')"">启用</el-checkbox>
                </template>
            </el-table-column>
            <el-table-column prop=""query"" label=""查"" width=""120"">
                <template slot-scope=""scope"">
                    <el-checkbox v-model=""scope.row.query"" ");
                WriteLiteral(@"@change=""checkEd(scope.row.id,scope.row.query,'query')"">启用</el-checkbox>
                </template>
            </el-table-column>
            <el-table-column prop=""create_date"" label=""创建日期"" align=""center"" sortable width=""200"">
                <template slot-scope=""scope"">
                    <i class=""el-icon-time""></i>
                    <span style=""margin-left: 10px"">{{ scope.row.create_date }}</span>
                </template>
            </el-table-column>
            <el-table-column prop=""update_date"" label=""修改日期"" align=""center"" sortable width=""200"">
                <template slot-scope=""scope"">
                    <i class=""el-icon-time""></i>
                    <span style=""margin-left: 10px"">{{ scope.row.update_date }}</span>
                </template>
            </el-table-column>
        </el-table>
        <!-- 结束 列表信息 -->
        <!-- 开始 分页 -->
        <div class=""block"" style=""text-align:center;"">
            <el-pagination background ");
                WriteLiteral("@size-change=\"handleSizeChangeEvent\" ");
                WriteLiteral(@"@current-change=""handleCurrentPageChangeEvent"" :current-page=""page.current_page""
                           :page-sizes=""page.sizes"" :page-size=""page.size"" :page-count=""page.page"" layout=""total, sizes, prev, pager, next, jumper"" :total=""page.total"">
            </el-pagination>
        </div>
        <!-- 结束 分页 -->
        <!-- 开始 添加 修改 -->
        <el-dialog :title=""dialog.title"" :visible.sync=""dialog.visible"" width=""30%"" :before-close=""handleDialogClose"">
            <el-radio-group v-model=""labelPosition"" size=""small"">
                <el-radio-button label=""left"">左对齐</el-radio-button>
                <el-radio-button label=""right"">右对齐</el-radio-button>
                <el-radio-button label=""top"">顶部对齐</el-radio-button>
            </el-radio-group>
            <div style=""margin: 20px;""></div>
            <el-form :model=""formSubmit"" status-icon ref=""formSubmit"" class=""demo-ruleForm"" :disabled=""disabled"" :label-position=""labelPosition"" label-width=""80px"">
                <template v-for=""ite");
                WriteLiteral(@"m in tableData"">
                    <el-input type=""hidden"" v-model=""item.id""></el-input>
                    <template v-if=""item.role"">
                        <el-form-item label=""角色名称"">
                            <el-input v-model=""item.role.name""></el-input>
                        </el-form-item>
                    </template>
                    <template v-if=""item.level"">
                        <el-form-item label=""等级名称"">
                            <el-input v-model=""level.name""></el-input>
                        </el-form-item>
                    </template>
                    <el-form-item label=""菜单名称"">
                        <el-input v-model=""item.menu.name""></el-input>
                    </el-form-item>
                    <el-form-item label=""设置"">
                        <el-checkbox-group>
                            <el-checkbox label=""启用"" value=""item.enable"" name=""sets""></el-checkbox>
                            <el-checkbox label=""添加"" value=""item.add"" name=""sets""");
                WriteLiteral(@"></el-checkbox>
                            <el-checkbox label=""修改"" value=""item.modify"" name=""sets""></el-checkbox>
                            <el-checkbox label=""删除"" value=""item.delete"" name=""sets""></el-checkbox>
                            <el-checkbox label=""查询"" value=""item.query"" name=""sets""></el-checkbox>
                        </el-checkbox-group>
                    </el-form-item>
                </template>
                <el-form-item>
                    <el-button type=""primary"" ");
                WriteLiteral(@"@click=""submitFormEvent('formSubmit')"">{{dialog.submitText}}</el-button>
                </el-form-item>
            </el-form>
        </el-dialog>
        <!-- 结束 添加 修改 -->

    </div>
    <!-- import Vue before Element -->
    <script src=""https://unpkg.com/vue/dist/vue.js""></script>
    <!-- import JavaScript -->
    <script src=""https://unpkg.com/element-ui/lib/index.js""></script>
    <script src=""https://unpkg.com/axios/dist/axios.min.js""></script>
    <script src=""/js/js.cookie.js""></script>
    <script src=""/js/index.js""></script>
    <script>
        var obj = new Gibson();
        obj.el = "".user_menu_list"";
        obj.data.operatorUrl = { add: urls.usermenu.add, modify: urls.usermenu.edit, delete: urls.usermenu.delete, query: urls.usermenu.query };
        obj.data.formQuery = { role_id: '', create_date: [], update_date: [] };
        obj.data.formSubmit = { id: '', category: '', role: { id: '' }, description: '这个人很懒,什么也没留下!' };
        obj.data.controller = ""usermenu"";
      ");
                WriteLiteral(@"  obj.data.isOperatorRequest = true;
        obj.data.roleRequired = false;
        obj.data.formRoleValidator = {
        };
        obj.methods.checkEd = function (id, val, type) {
            console.log(id + "" "" + val + "" "" + type);
            var $this = this;
            var paramOptions = parseRequestParam($this.request_content_type, { id: id, val: val.toString(), type: type });
            post(urls.usermenu.edit, paramOptions.parem, paramOptions.contenType, function (response) {
                $this.loadTableDataOrQueryDataEvent();
                $this.dialog.visible = false;
            }, response => $this.tip(response.data.message, '提示：', '确定'));
        }
        obj.methods.reload = function () {
            this.queryCategoryEvent();

        };
        setRoleCategory(obj);
        function setLevel(obj) {
            obj.data.level_options = [];
            obj.data.formQuery.level_id = """";
            obj.data.formSubmit.level = { id: """" };
            obj.methods.le");
                WriteLiteral(@"velQueryEvent = function () {
                var $this = this;
                get(urls.userlevel.category, function (response) { $this.level_options = response.data.data; });
            };
            obj.methods.handleLevelVisableChangeEvent = function (value) {
                if (value) {
                    this.levelQueryEvent();
                }
            };
            obj.methods.handleLevelFormChangeEvent = function (value) {
                if (value instanceof Array) {
                    this.formSubmit.level.id = value[value.length - 1];
                }
                else {
                    this.formSubmit.level.id = value;
                }
            };
            obj.methods.handleLevelQueryChangeEvent = function (value) {
                if (value instanceof Array) {
                    this.formQuery.level_id = value[value.length - 1];
                }
                else {
                    this.formQuery.level_id = value;
                }
       ");
                WriteLiteral(@"     };
        }
        setLevel(obj);
        function setMenu(obj) {
            obj.data.menu_options = [];
            obj.data.formQuery.menu_id = """";
            obj.data.formSubmit.menu = { id: """" };
            obj.methods.menuQueryEvent = function () {
                var $this = this;
                get(urls.menu.category, function (response) { $this.menu_options = response.data.data; });
            };
            obj.methods.handleMenuVisableChangeEvent = function (value) {
                if (value) {
                    this.menuQueryEvent();
                }
            };
            obj.methods.handleMenuFormChangeEvent = function (value) {
                if (value instanceof Array) {
                    this.formSubmit.menu.id = value[value.length - 1];
                }
                else {
                    this.formSubmit.menu.id = value;
                }
            };
            obj.methods.handleMenuQueryChangeEvent = function (value) {
             ");
                WriteLiteral(@"   if (value instanceof Array) {
                    this.formQuery.menu_id = value[value.length - 1];
                }
                else {
                    this.formQuery.menu_id = value;
                }
            };
        }
        setMenu(obj);
        //测试用的
        setAdmin(obj);
        //覆盖此方法 重写
        obj.methods.submitTextSelectChanngeEevent = function () {
            this.dialog.title = ""查看用户菜单信息"";
            this.dialog.submitText = ""预览用户菜单信息"";
            this.disabled = true;
        };
        //覆盖此方法 重写
        obj.methods.submitTextModifyChanngeEevent = function () {
            this.dialog.title = ""编辑用户菜单信息"";
            this.dialog.submitText = ""立即编辑"";
            this.disabled = false;
        };
        //覆盖此方法 重写
        obj.methods.submitTextInsertChanngeEevent = function () {
            this.dialog.title = ""添加用户菜单信息"";
            this.dialog.submitText = ""立即创建"";
            this.disabled = false;
        };
        //覆盖此方法 重写
        obj.m");
                WriteLiteral(@"ethods.setValue = function (row) {
            for (var obj in this.formSubmit) {
                if (row[obj]) {
                    this.formSubmit[obj] = row[obj];
                }
            }
        };
        new Vue(obj);
    </script>

");
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n</html>\r\n");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
