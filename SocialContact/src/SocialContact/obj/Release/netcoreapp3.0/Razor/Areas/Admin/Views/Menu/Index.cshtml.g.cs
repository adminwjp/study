#pragma checksum "E:\work\program\SocialContact\src\SocialContact\Areas\Admin\Views\Menu\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "1ad31ccb7f72ca92ef7a533c1eb7c85c6959b3ad"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Areas_Admin_Views_Menu_Index), @"mvc.1.0.view", @"/Areas/Admin/Views/Menu/Index.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"1ad31ccb7f72ca92ef7a533c1eb7c85c6959b3ad", @"/Areas/Admin/Views/Menu/Index.cshtml")]
    public class Areas_Admin_Views_Menu_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper;
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral("<!DOCTYPE html>\r\n\r\n<html>\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("head", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "1ad31ccb7f72ca92ef7a533c1eb7c85c6959b3ad2763", async() => {
                WriteLiteral(@"
    <meta name=""viewport"" content=""width=device-width"" />
    <title>菜单列表</title>
    <!-- 引入样式 -->
    <link rel=""stylesheet"" href=""https://unpkg.com/element-ui/lib/theme-chalk/index.css"">
    <style>
        .demo-form-inline {
            margin: 0px 70px;
            text-align: left;
        }
    </style>
");
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("body", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "1ad31ccb7f72ca92ef7a533c1eb7c85c6959b3ad4059", async() => {
                WriteLiteral(@"
    <div class=""menu_list"">
        <!-- 开始查询信息 -->
        <el-form :inline=""true"" :model=""formQuery"" ref=""formQuery"" class=""demo-form-inline "">
            <el-form-item label=""菜单分类"" prop=""id"">
                <el-cascader v-model=""formQuery.id"" ref=""refHandleQuery""
                             :options=""options"" filterable :props=""{ checkStrictly: true,expandTrigger: 'hover' }""
                             ");
                WriteLiteral("@change=\"handleCategoryQueryChangeEvent\" ");
                WriteLiteral("@visible-change=\"handleCategoryQueryVisableChangeEvent\" clearable>\r\n                    <template slot-scope=\"{ node, data }\">\r\n                        <span style=\"float: left\" ");
                WriteLiteral("@click=\"handleCategotyQueryClickEvent(data.value)\">{{ data.label }}</span>\r\n                        <span style=\"float: right;color: #8492a6;font-size: 13px\" ");
                WriteLiteral(@"@click=""handleCategotyQueryClickEvent(data.value)""><i v-bind:class=""data.style""></i></span>
                        <span v-if=""!node.isLeaf""> ({{ data.children.length }}) </span>
                    </template>
                </el-cascader>
            </el-form-item>
            <el-form-item label=""菜单名称"" prop=""menu_name"">
                <el-input v-model=""formQuery.menu_name"" placeholder=""菜单名称""></el-input>
            </el-form-item>
            <el-form-item label=""菜单分组"" prop=""menu_group"">
                <el-input v-model=""formQuery.menu_group"" placeholder=""菜单分组""></el-input>
            </el-form-item>
            <el-form-item label=""父菜单分类"" prop=""parent_id"">
                <el-select v-model=""formQuery.parent_id"" filterable placeholder=""请选择"" ");
                WriteLiteral("@change=\"handleParentCategoryQueryChangeEvent\" ");
                WriteLiteral(@"@visible-change=""handleParentCategoryQueryVisableChangeEvent"">
                    <el-option v-for=""item in parent_options""
                               :key=""item.label""
                               :label=""item.label""
                               :value=""item.value"">
                        <span style=""float: left"">{{ item.label }}</span>
                        <span style=""float: right; color: #8492a6; font-size: 13px""><i v-bind:class=""item.style""></i></span>
                    </el-option>
                </el-select>
            </el-form-item>
            <el-form-item label=""创建时间范围"" prop=""create_date"">
                <el-date-picker v-model=""formQuery.create_date"" type=""datetimerange"" value-format=""yyyy-MM-dd HH:mm:ss"" :picker-options=""createDatePickerOptions""
                                range-separator=""至"" start-placeholder=""开始日期"" align=""right"">
                </el-date-picker>
            </el-form-item>
            <el-form-item label=""修改时间范围"" prop=""update_date"">
    ");
                WriteLiteral(@"            <el-date-picker v-model=""formQuery.update_date"" type=""datetimerange"" value-format=""yyyy-MM-dd HH:mm:ss"" :picker-options=""createDatePickerOptions"" range-separator=""至"" start-placeholder=""开始日期""
                                end-placeholder=""结束日期"" align=""right"">
                </el-date-picker>
            </el-form-item>
            <el-form-item>
                <el-button type=""primary"" ");
                WriteLiteral("@click=\"loadTableDataOrQueryDataEvent\">查询</el-button>\r\n                <el-button ");
                WriteLiteral("@click=\"resetFormEvent(\'formQuery\')\">重置</el-button>\r\n            </el-form-item>\r\n        </el-form>\r\n        <!-- 结束查询信息 -->\r\n        <!-- 开始 操作按钮 -->\r\n        <div style=\"margin-top: 20px;text-align:left;margin-bottom:10px\">\r\n            <el-button ");
                WriteLiteral("@click=\"toggleSelectionTableCheckBoxButtonEvent(checkboxAllSelect?tableData:null)\">{{checkboxAllSelectText}}</el-button>\r\n            <el-button v-if=\"operator.add\" ");
                WriteLiteral("@click=\"insertButtonClickEvent\" icon=\"el-icon-plus\">添加</el-button>\r\n            <el-button v-if=\"operator.modify\" ");
                WriteLiteral("@click=\"modifyButtonClickEvent\" icon=\"el-icon-edit\">编辑</el-button>\r\n            <el-button v-if=\"operator.delete\" ");
                WriteLiteral("@click=\"deleteButtonClickEvent\" icon=\"el-icon-delete\">删除</el-button>\r\n            <el-button ");
                WriteLiteral("@click=\"queryButtonClickEvent\" icon=\"el-icon-view\">查看</el-button>\r\n            <el-button ");
                WriteLiteral(@"@click=""loadTableDataOrQueryDataEvent"" icon=""el-icon-refresh"">刷新</el-button>
        </div>
        <!-- 结束 操作按钮 -->
        <!-- 开始 列表信息 -->
        <!-- 开始 列表信息 -->
        <el-table v-loading=""loading"" element-loading-spinner=""el-icon-loading"" element-loading-background=""rgba(0, 0, 0, 0.8)"" ref=""multipleTable"" :data=""tableData"" tooltip-effect=""dark"" style=""width: 100%""
                  highlight-current-row row-key=""id"" current-row-key=""id"" border ");
                WriteLiteral(@"@selection-change=""handleSelectionChange"" :default-sort=""{prop: 'create_date', order: 'descending'}"" :tree-props=""{children: 'children', hasChildren: 'hasChildren'}"">
            <el-table-column type=""selection"" align=""center"" width=""55""> </el-table-column>
            <el-table-column type=""index"" width=""50"" align=""center"" sortable label=""序号""> </el-table-column>
            <el-table-column prop=""id"" label=""编号"" align=""center"" sortable width=""70"">  </el-table-column>
			<el-table-column prop=""menu_name"" label=""菜单名称"" align=""center"" width=""200""> </el-table-column>
            <el-table-column prop=""menu_group"" label=""菜单分组"" align=""center"" width=""200"">
                <template slot-scope=""scope"">
                    <span v-html=""!scope.row.menu_group?'无':scope.row.menu_group""></span>
                </template>
            </el-table-column>
			
            <el-table-column prop=""description"" label=""菜单描述"" align=""center"" width=""300""> </el-table-column>
            <el-table-column prop=""href"" label=");
                WriteLiteral(@"""菜单链接"" align=""center"" width=""200"">
                <template slot-scope=""scope"">
                    <span v-html=""!scope.row.href?'无':scope.row.href""></span>
                </template>
            </el-table-column>
            <el-table-column prop=""icon"" label=""图标编号"" align=""center"" width=""200"">
                <template slot-scope=""scope"" v-if=""scope.row.icon"">
                    <el-popover trigger=""hover"" placement=""top"">
                        <p>图标编号: {{ scope.row.icon.id }}</p>
                        <p>图标名称: {{ scope.row.icon.label }}</p>
                        <p>图标样式: {{ scope.row.icon.value }}</p>
                        <p>图标样式展示: <i :class=""scope.row.icon.value""></i></p>
                        <div slot=""reference"" class=""name-wrapper"">
                            <el-tag size=""medium"">{{ scope.row.icon.id }}</el-tag>
                        </div>
                    </el-popover>
                </template>
            </el-table-column>
            <el-table-column lab");
                WriteLiteral(@"el=""父菜单编号"" prop=""parent.id"" align=""center"" width=""200"">
                <template slot-scope=""scope"" v-if=""scope.row.parent"">
                    <el-popover trigger=""hover"" placement=""top"">
                        <p>父菜单编号: {{ scope.row.parent.id }}</p>
                        <p>父菜单名称: {{ scope.row.parent.menu_name }}</p>
                        <p>父菜单分组:<span v-html=""!scope.row.parent.menu_group?'无':scope.row.parent.menu_group""></span></p>
                        <p>父菜单描述: {{scope.row.parent.description}}</p>
                        <div slot=""reference"" class=""name-wrapper"">
                            <el-tag size=""medium"">{{ scope.row.parent.id }}</el-tag>
                        </div>
                    </el-popover>
                </template>
            </el-table-column>
            <el-table-column prop=""admin.id"" label=""管理员编号"" align=""center"" sortable width=""200"">
                <template slot-scope=""scope"" v-if=""scope.row.admin"">
                    <el-popover trigger=""hover"" p");
                WriteLiteral(@"lacement=""top"">
                        <p>管理员编号: {{ scope.row.admin.id }}</p>
                        <p>账户: {{ scope.row.admin.account }}</p>
                        <p>昵称: {{ scope.row.admin.nick_name }}</p>
                        <p>姓名: {{ scope.row.admin.real_name }}</p>
                        <p>
                            出生日期:  <i class=""el-icon-time""></i>
                            <span style=""margin-left: 10px"">{{ scope.row.admin.birthday }}</span>
                        </p>
                        <p>
                        <p>
                            头像:<img v-if=""scope.row.admin.head_pic"" style=""margin-left:10px;margin-top:-5px;border-radius:50%;width:36px;height:36px;vertical-align:middle;"" :src=""baseUrl+'img/'+scope.row.admin.head_pic"" class=""avatar"">
");
                WriteLiteral(@"                            <img v-else style=""margin-left:10px;margin-top:-5px;border-radius:50%;width:36px;height:36px;vertical-align:middle;"" src=""https://cube.elemecdn.com/e/fd/0fc7d20532fdaf769a25683617711png.png"" />
                        </p>
                        <p>手机: {{ scope.row.admin.phone }}</p>
                        <p>性别: {{ scope.row.admin.sex }}</p>
                        <p>描述: {{ scope.row.admin.description }}</p>
                        <p>邮箱: {{ scope.row.admin.email }}</p>
                        <p>角色: {{ scope.row.admin.role }}</p>
                        <div slot=""reference"" class=""name-wrapper"">
                            <el-tag size=""medium"">{{ scope.row.admin.id }}</el-tag>
                        </div>
                    </el-popover>
                </template>
            </el-table-column>
            <el-table-column prop=""create_date"" label=""创建日期"" align=""center"" sortable width=""200""> </el-table-column>
            <el-table-column prop=""update_date"" ");
                WriteLiteral("label=\"修改日期\" align=\"center\" sortable width=\"200\"> </el-table-column>\r\n            <el-table-column label=\"操作\" width=\"200\">\r\n                <template slot-scope=\"scope\">\r\n                    <el-button ");
                WriteLiteral("@click=\"handleSelectClickEvent(scope.row)\" type=\"text\" icon=\"el-icon-view\" size=\"small\">查看</el-button>\r\n                    <el-button type=\"text\" ");
                WriteLiteral("@click=\"handleModifyClickEvent(scope.row)\" icon=\"el-icon-edit\" v-if=\"operator.modify\" size=\"small\">编辑</el-button>\r\n                    <el-button type=\"text\" ");
                WriteLiteral(@"@click=""handleDeleteClickEvent(scope.row)"" icon=""el-icon-delete"" v-if=""operator.delete"" size=""small"">删除</el-button>
                </template>
            </el-table-column>
        </el-table>
        <!-- 结束 列表信息 -->
        <!-- 开始 分页 -->
        <div class=""block"" style=""text-align:center;"">
            <el-pagination background ");
                WriteLiteral("@size-change=\"handleSizeChangeEvent\" ");
                WriteLiteral(@"@current-change=""handleCurrentPageChangeEvent"" :current-page=""page.current_page""
                           :page-sizes=""page.sizes"" :page-size=""page.size"" :page-count=""page.page"" layout=""total, sizes, prev, pager, next, jumper"" :total=""page.total"">
            </el-pagination>
        </div>
        <!-- 结束 分页 -->
        <!-- 开始 添加 修改 -->
        <el-dialog :title=""dialog.title"" :visible.sync=""dialog.visible"" width=""30%"" :before-close=""handleDialogClose"">
            <el-radio-group v-model=""labelPosition"" size=""small"">
                <el-radio-button label=""left"">左对齐</el-radio-button>
                <el-radio-button label=""right"">右对齐</el-radio-button>
                <el-radio-button label=""top"">顶部对齐</el-radio-button>
            </el-radio-group>
            <div style=""margin: 20px;""></div>
            <el-form :model=""formSubmit"" status-icon :rules=""formRoleValidator"" ref=""formSubmit"" :disabled=""disabled"" class=""demo-ruleForm"" :label-position=""labelPosition"" label-width=""80px"">
         ");
                WriteLiteral(@"       <el-input type=""hidden"" v-model=""formSubmit.id""></el-input>
                <el-form-item label=""菜单名称"" prop=""menu_name"">
                    <el-input v-model=""formSubmit.menu_name""></el-input>
                </el-form-item>
                <el-form-item label=""菜单分组"" prop=""menu_group"">
                    <el-input v-model=""formSubmit.menu_group""></el-input>
                </el-form-item>
                <el-form-item label=""菜单链接"" prop=""href"">
                    <el-input v-model=""formSubmit.href""></el-input>
                </el-form-item>
                <el-form-item label=""菜单图标"" prop=""icon.id"">
                    <el-select v-model=""formSubmit.icon.id"" filterable placeholder=""请选择"" ");
                WriteLiteral("@change=\"handleIconChangeEvent\" ");
                WriteLiteral(@"@visible-change=""handleIconVisableChangeEvent"">
                        <el-option v-for=""item in icon_options""
                                   :key=""item.label""
                                   :label=""item.label""
                                   :value=""item.id"">
                            <span style=""float: left"">{{ item.label }}</span>
                            <span style=""float: right; color: #8492a6; font-size: 13px""><i v-bind:class=""item.value""></i></span>
                        </el-option>
                    </el-select>
                </el-form-item>
                <el-form-item label=""菜单分类"" prop=""parent.id"">
                    <el-cascader v-model=""formSubmit.parent.id"" ref=""refHandleForm""
                                 :options=""options"" filterable :props=""{ checkStrictly: true,expandTrigger: 'hover' }""
                                 ");
                WriteLiteral("@change=\"handleCategoryFormChangeEvent\" ");
                WriteLiteral("@visible-change=\"handleCategoryQueryVisableChangeEvent\" clearable>\r\n                        <template slot-scope=\"{ node, data }\">\r\n                            <span style=\"float: left\" ");
                WriteLiteral("@click=\"handleCategotyFormClickEvent(data.value)\">{{ data.label }}</span>\r\n                            <span style=\"float: right;color: #8492a6;font-size: 13px\" ");
                WriteLiteral(@"@click=""handleCategotyFormClickEvent(data.value)""><i v-bind:class=""data.style""></i></span>
                            <span v-if=""!node.isLeaf""> ({{ data.children.length }}) </span>
                        </template>
                    </el-cascader>
                </el-form-item>
                <template v-if=""test"">
                    <el-form-item label=""管理员"" prop=""admin.id"">
                        <el-select v-model=""formSubmit.admin.id"" filterable placeholder=""请选择"" ");
                WriteLiteral("@change=\"handleAdminChangeEvent\" ");
                WriteLiteral(@"@visible-change=""handleAdminVisableChangeEvent"">
                            <el-option v-for=""item in admin_options"" :key=""item.id""
                                       :label=""item.category"" :value=""item.id"">
                            </el-option>
                        </el-select>
                    </el-form-item>
                </template>
                <el-form-item label=""菜单描述"" prop=""description"">
                    <el-input type=""textarea"" v-model=""formSubmit.description"" value=""这个人很懒,什么也没留下!""></el-input>
                </el-form-item>
                <el-form-item>
                    <el-button type=""primary"" ");
                WriteLiteral("@click=\"submitFormEvent(\'formSubmit\')\">{{dialog.submitText}}</el-button>\r\n                    <el-button ");
                WriteLiteral(@"@click=""resetFormEvent('formSubmit')"">{{dialog.resetText}}</el-button>
                </el-form-item>
            </el-form>
        </el-dialog>
        <!-- 结束 添加 修改 -->

    </div>
    <!-- import Vue before Element -->
    <script src=""https://unpkg.com/vue/dist/vue.js""></script>
    <!-- import JavaScript -->
    <script src=""https://unpkg.com/element-ui/lib/index.js""></script>
    <script src=""https://unpkg.com/axios/dist/axios.min.js""></script>
    <script src=""/js/js.cookie.js""></script>
    <script src=""/js/index.js""></script>
    <script>
        var obj = new Gibson();
        obj.el = "".menu_list"";
        obj.data.operatorUrl = { add: urls.menu.add, modify: urls.menu.edit, delete: urls.menu.delete, query: urls.menu.query };
        obj.data.formQuery = { id: '', admin_id: '', menu_name: '', menu_group: '', parent_id: '', create_date: [], update_date: [] };
        obj.data.formSubmit = { id: '', menu_name: '', menu_group: '', href: '', parent: { id: '' }, icon: { id: '' }, des");
                WriteLiteral(@"cription: '这个人很懒,什么也没留下!' };
        obj.data.controller = ""menu"";
        obj.data.parent_options = [];
        obj.data.icon_options = [];
        obj.data.isOperatorRequest = true;
        obj.data.formRoleValidator = {
            category: [
                { required: true, message: '请输入分类名称', trigger: 'blur' },
                { min: 2, max: 10, message: '长度在 2 到 10 个字符分类名称', trigger: 'blur' }
            ],
            description: [
                { required: true, message: '请输入描述', trigger: 'blur' },
                { min: 10, max: 500, message: '长度在 10 到 500 个字符描述', trigger: 'blur' }
            ]
        };
        //覆盖此方法 重写
        obj.methods.loadMounted = function () {
            this.queryIconCategoryEvent();
            this.queryCategoryEvent();
            this.queryParentCategoryEvent();
            if (this.test) this.adminCategoryQueryEvent();
        };
        //图标信息
        obj.methods.queryIconCategoryEvent = function () {
            var $this = this;
   ");
                WriteLiteral(@"         get(urls.icon.category, response => { $this.icon_options = response.data.data; });
        };
        //测试用的
        setAdmin(obj);

        //父菜单分类信息
        obj.methods.queryParentCategoryEvent = function () {
            var $this = this; get(urls.menu.parent_category, response => { $this.parent_options = response.data.data; });
        };
        //图标分类改变值时触发事件
        obj.methods.handleIconChangeEvent = function (val) {
            this.formSubmit.icon.id = val;
        };
        //图标分类打开时触发事件
        obj.methods.handleIconVisableChangeEvent = function (val) {
            if (val) {
                this.queryIconCategoryEvent();
            }
        };
        //父菜单分类改变值时触发事件
        obj.methods.handleParentCategoryQueryChangeEvent = function (val) {
            this.formQuery.parent_id = val;
        };
        //父菜单分类打开时触发事件
        obj.methods.handleParentCategoryQueryVisableChangeEvent = function (val) {
            if (val) {
                this.queryParentCateg");
                WriteLiteral(@"oryEvent();
            }
        };
        //菜单分类改变值时触发事件
        obj.methods.handleCategoryFormChangeEvent = function (val) {
            if (val instanceof Array) {
                this.formSubmit.parent.id = val[val.length - 1];
            }
            else {
                this.formSubmit.parent.id = val;
            }
        };
        //菜单分类点击触发事件
        obj.methods.handleCategotyFormClickEvent = function (val) {
            this.handleCategoryFormChangeEvent(val);
            if (val) {
                if (this.$refs.refHandleForm) {
                    this.$refs.refHandleForm.dropDownVisible = false; //监听值发生变化就关闭它
                }
            }
        };
        //菜单分类点击触发事件
        obj.methods.handleCategotyQueryClickEvent = function (val) {
            this.handleCategoryQueryChangeEvent(val);
            if (val) {
                if (this.$refs.refHandleQuery) {
                    this.$refs.refHandleQuery.dropDownVisible = false; //监听值发生变化就关闭它
               ");
                WriteLiteral(@" }
            }
        };
        //覆盖此方法 重写
        obj.methods.submitTextSelectChanngeEevent = function () {
            this.dialog.title = ""查看菜单信息"";
            this.dialog.submitText = ""预览菜单信息"";
            this.disabled = true;
        };
        //覆盖此方法 重写
        obj.methods.submitTextModifyChanngeEevent = function () {
            this.dialog.title = ""编辑菜单信息"";
            this.dialog.submitText = ""立即编辑"";
            this.disabled = false;
        };
        //覆盖此方法 重写
        obj.methods.submitTextInsertChanngeEevent = function () {
            this.dialog.title = ""添加菜单信息"";
            this.dialog.submitText = ""立即创建"";
            this.disabled = false;
        };
        //覆盖此方法 重写
        obj.methods.setValue = function (row) {
            for (var obj in this.formSubmit) {
                if (obj.toString() == 'admin' || obj.toString() == 'icon' || obj.toString() == 'parent' || obj.toString() == 'children') {
                    continue;
                }
             ");
                WriteLiteral("   this.formSubmit[obj] = row[obj];\r\n            }\r\n            if (row.icon) this.formSubmit[\"icon\"].id = row.icon.id;\r\n            if (row.parent) this.formSubmit[\"parent\"].id = row.parent.id;\r\n        };\r\n        new Vue(obj);\r\n    </script>\r\n\r\n");
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n</html>\r\n");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
