#pragma checksum "E:\work\program\SocialContact\src\SocialContact\Areas\Admin\Views\User\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "184741d44b415a02c51c2d5dbfc3237b4931d00e"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Areas_Admin_Views_User_Index), @"mvc.1.0.view", @"/Areas/Admin/Views/User/Index.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"184741d44b415a02c51c2d5dbfc3237b4931d00e", @"/Areas/Admin/Views/User/Index.cshtml")]
    public class Areas_Admin_Views_User_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper;
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral("<!DOCTYPE html>\r\n\r\n<html>\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("head", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "184741d44b415a02c51c2d5dbfc3237b4931d00e2763", async() => {
                WriteLiteral(@"
    <meta charset=""utf-8"">
    <meta http-equiv=""X-UA-Compatible"" content=""IE=edge,chrome=1"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no"">
    <link rel=""icon"" href=""/favicon.ico"">
    <title>用户列表</title>
    <!-- 引入样式 -->
    <link rel=""stylesheet"" href=""https://unpkg.com/element-ui/lib/theme-chalk/index.css"">
    <style>

        .demo-form-inline {
            margin: 0px 70px;
            text-align: left;
        }

        .el-table td, .el-table th {
            text-align: center !important;
        }

        .avatar-uploader .el-upload {
            border: 1px dashed #d9d9d9;
            border-radius: 6px;
            cursor: pointer;
            position: relative;
            overflow: hidden;
        }

            .avatar-uploader .el-upload:hover {
                border-color: #409EFF;
            }

        .avatar-uploader-icon {
            font-size: 28px;
            color: #8c939d;
       ");
                WriteLiteral("     width: 178px;\r\n            height: 178px;\r\n            line-height: 178px;\r\n            text-align: center;\r\n        }\r\n\r\n        .avatar {\r\n            width: 178px;\r\n            height: 178px;\r\n            display: block;\r\n        }\r\n    </style>\r\n");
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("body", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "184741d44b415a02c51c2d5dbfc3237b4931d00e5082", async() => {
                WriteLiteral(@"
    <div class=""user_list"">

        <!-- 开始查询信息 -->
        <el-form :inline=""true"" :model=""formQuery"" ref=""formQuery"" class=""demo-form-inline "">

            <el-form-item label=""编号"" prop=""id"">
                <el-select v-model=""formQuery.id"" placeholder=""请选择"" ");
                WriteLiteral("@change=\"handleCategoryQueryChangeEvent\" ");
                WriteLiteral(@"@visible-change=""handleCategoryQueryVisableChangeEvent"">
                    <el-option v-for=""it in options"" :key=""it.id"" :label=""it.category"" :value=""it.id"">
                    </el-option>
                </el-select>
            </el-form-item>
            <el-form-item label=""Token"" prop=""token"">
                <el-input v-model=""formQuery.token"" placeholder=""Token""></el-input>
            </el-form-item>
            <el-form-item label=""账户"" prop=""account"">
                <el-input v-model=""formQuery.account"" placeholder=""账户""></el-input>
            </el-form-item>
            <el-form-item label=""昵称"" prop=""nick_name"">
                <el-input v-model=""formQuery.nick_name"" placeholder=""昵称""></el-input>
            </el-form-item>
            <el-form-item label=""真实姓名"" prop=""real_name"">
                <el-input v-model=""formQuery.real_name"" placeholder=""真实姓名""></el-input>
            </el-form-item>
            <el-form-item label=""出生日期范围"" prop=""birthday_date"">
                <el-dat");
                WriteLiteral(@"e-picker v-model=""formQuery.birthday_date"" type=""datetimerange"" value-format=""yyyy-MM-dd HH:mm:ss"" :picker-options=""createDatePickerOptions"" range-separator=""至""
                                start-placeholder=""开始日期"" end-placeholder=""结束日期"" align=""right"">
                </el-date-picker>
            </el-form-item>
            <el-form-item label=""手机号"" prop=""phone"">
                <el-input v-model=""formQuery.phone"" placeholder=""手机号""></el-input>
            </el-form-item>
            <el-form-item label=""性别"" prop=""sex"">
                <el-select v-model=""formQuery.sex"" placeholder=""性别"">
                    <el-option label=""男"" value=""男""></el-option>
                    <el-option label=""女"" value=""女""></el-option>
                </el-select>
            </el-form-item>
            <el-form-item label=""学历"" prop=""edution_id"">
                <el-select v-model=""formQuery.edution_id"" placeholder=""请选择"" ");
                WriteLiteral("@change=\"handleEdutionCategoryChangeEvent\" ");
                WriteLiteral(@"@visible-change=""handleEdutionCategoryVisableChangeEvent"">
                    <el-option v-for=""it in edution_options"" :key=""it.id"" :label=""it.category"" :value=""it.id"">
                    </el-option>
                </el-select>
            </el-form-item>
            <el-form-item label=""婚姻状态"" prop=""marital_id"">
                <el-select v-model=""formQuery.marital_id"" placeholder=""请选择"" ");
                WriteLiteral("@change=\"handleMaritalCategoryChangeEvent\" ");
                WriteLiteral(@"@visible-change=""handleMaritalCategoryVisableChangeEvent"">
                    <el-option v-for=""it in marital_options"" :key=""it.id"" :label=""it.category"" :value=""it.id"">
                    </el-option>
                </el-select>
            </el-form-item>
            <el-form-item label=""邮箱"" prop=""email"">
                <el-input v-model=""formQuery.email"" placeholder=""邮箱""></el-input>
            </el-form-item>
            <el-form-item label=""身份证号"" prop=""card_id"">
                <el-input v-model=""formQuery.card_id"" placeholder=""身份证号""></el-input>
            </el-form-item>
            <el-form-item label=""银行卡号"" prop=""bank_id"">
                <el-input v-model=""formQuery.bank_id"" placeholder=""银行卡号""></el-input>
            </el-form-item>
            <el-form-item label=""用户状态"" prop=""status_id"">
                <el-select v-model=""formQuery.status_id"" placeholder=""请选择"" ");
                WriteLiteral("@change=\"handleStatusCategoryChangeEvent\" ");
                WriteLiteral(@"@visible-change=""handleStatusCategoryVisableChangeEvent"">
                    <el-option v-for=""it in status_options"" :key=""it.id"" :label=""it.category"" :value=""it.id"">
                    </el-option>
                </el-select>
            </el-form-item>
            <el-form-item label=""登录ip"" prop=""login_ip"">
                <el-input v-model=""formQuery.login_ip"" placeholder=""登录ip""></el-input>
            </el-form-item>
            <el-form-item label=""用户等级"" prop=""level_id"">
                <el-select v-model=""formQuery.level_id"" placeholder=""请选择"" ");
                WriteLiteral("@change=\"handleLevelCategoryChangeEvent\" ");
                WriteLiteral(@"@visible-change=""handleLevelCategoryVisableChangeEvent"">
                    <el-option v-for=""it in level_options"" :key=""it.id"" :label=""it.category"" :value=""it.id"">
                    </el-option>
                </el-select>
            </el-form-item>
            <el-form-item label=""登录时间范围"" prop=""login_date"">
                <el-date-picker v-model=""formQuery.login_date"" type=""datetimerange"" value-format=""yyyy-MM-dd HH:mm:ss"" :picker-options=""createDatePickerOptions"" range-separator=""至""
                                start-placeholder=""开始日期"" end-placeholder=""结束日期"" align=""right"">
                </el-date-picker>
            </el-form-item>
            <el-form-item label=""创建时间范围"" prop=""create_date"">
                <el-date-picker v-model=""formQuery.create_date"" type=""datetimerange"" value-format=""yyyy-MM-dd HH:mm:ss"" :picker-options=""createDatePickerOptions""
                                range-separator=""至"" start-placeholder=""开始日期"" align=""right"">
                </el-date-picker>
       ");
                WriteLiteral(@"     </el-form-item>
            <el-form-item label=""修改时间范围"" prop=""update_date"">
                <el-date-picker v-model=""formQuery.update_date"" type=""datetimerange"" value-format=""yyyy-MM-dd HH:mm:ss"" :picker-options=""createDatePickerOptions"" range-separator=""至"" start-placeholder=""开始日期""
                                end-placeholder=""结束日期"" align=""right"">
                </el-date-picker>
            </el-form-item>
            <el-form-item>
                <el-button type=""primary"" ");
                WriteLiteral("@click=\"loadTableDataOrQueryDataEvent\">查询</el-button>\r\n                <el-button ");
                WriteLiteral("@click=\"resetFormEvent(\'formQuery\')\">重置</el-button>\r\n            </el-form-item>\r\n        </el-form>\r\n        <!-- 结束查询信息 -->\r\n        <!-- 开始 操作按钮 -->\r\n        <div style=\"margin-top: 20px;text-align:left;margin-bottom:10px\">\r\n            <el-button ");
                WriteLiteral("@click=\"toggleSelectionTableCheckBoxButtonEvent(checkboxAllSelect?tableData:null)\">{{checkboxAllSelectText}}</el-button>\r\n            <el-button ");
                WriteLiteral("@click=\"insertButtonClickEvent\" v-if=\"operator.add\" icon=\"el-icon-plus\">添加</el-button>\r\n            <el-button ");
                WriteLiteral("@click=\"modifyButtonClickEvent\" v-if=\"operator.modify\" icon=\"el-icon-edit\">编辑</el-button>\r\n            <el-button ");
                WriteLiteral("@click=\"deleteButtonClickEvent\" v-if=\"operator.delete\" icon=\"el-icon-delete\">删除</el-button>\r\n            <el-button ");
                WriteLiteral("@click=\"queryButtonClickEvent\" icon=\"el-icon-view\">查看</el-button>\r\n            <el-button ");
                WriteLiteral(@"@click=""loadTableDataOrQueryDataEvent"" icon=""el-icon-refresh"">刷新</el-button>
        </div>
        <!-- 结束 操作按钮 -->
        <!-- 开始 列表信息 -->
        <el-table v-loading=""loading"" element-loading-spinner=""el-icon-loading""
                  element-loading-background=""rgba(0, 0, 0, 0.8)"" ref=""multipleTable""
                  :data=""tableData"" tooltip-effect=""dark""
                  highlight-current-row row-key=""id"" border
                  ");
                WriteLiteral(@"@selection-change=""handleSelectionChange""
                  :default-sort=""{prop: 'create_date', order: 'descending'}"">
            <el-table-column type=""selection"" width=""55"" align=""center""> </el-table-column>
            <el-table-column type=""index"" width=""50"" sortable label=""序号"" align=""center""> </el-table-column>
            <el-table-column prop=""id"" label=""编号"" sortable width=""50"" align=""center"">  </el-table-column>
            <el-table-column prop=""account"" label=""账户"" width=""120"" align=""center"">  </el-table-column>
            <el-table-column prop=""password"" label=""密码"" width=""120"" align=""center""> </el-table-column>
            <el-table-column prop=""nick_name"" label=""昵称"" width=""70"" align=""center""> </el-table-column>
            <el-table-column prop=""login_date"" label=""登录时间"" sortable width=""100"" align=""center"">
                <template slot-scope=""scope"">
                    <i class=""el-icon-time""></i>
                    <span style=""margin-left: 10px"">{{ scope.row.login_date }}</span>");
                WriteLiteral(@"
                </template>
            </el-table-column>
            <el-table-column prop=""token"" label=""Token"" width=""100"" align=""center""> </el-table-column>
            <el-table-column prop=""express_in"" label=""Token失效时间(单位：秒)"" width=""150"" align=""center""> </el-table-column>
            <el-table-column prop=""real_name"" label=""真实姓名"" width=""70"" align=""center""> </el-table-column>
            <el-table-column prop=""head_pic"" label=""头像"" width=""200"" align=""center"">
                <template slot-scope=""scope"">
                    <img v-if=""scope.row.head_pic"" :src=""'https://localhost:44328/admin/api/v1/file/get/'+scope.row.head_pic"" align=""middle"" class=""avatar"">
                    <img v-else src=""https://cube.elemecdn.com/e/fd/0fc7d20532fdaf769a25683617711png.png"" class=""avatar"" />
                </template>
            </el-table-column>
            <el-table-column prop=""birthday"" label=""出生日期"" sortable width=""100"" align=""center"">
                <template slot-scope=""scope"">
              ");
                WriteLiteral(@"      <i class=""el-icon-time""></i>
                    <span style=""margin-left: 10px"">{{ scope.row.login_date }}</span>
                </template>
            </el-table-column>
            <el-table-column prop=""edution"" label=""学历"" width=""70"" align=""center""> </el-table-column>
            <el-table-column prop=""bank_id"" label=""银行卡号"" width=""100"" align=""center""> </el-table-column>
            <el-table-column prop=""card_id"" label=""身份证号"" width=""100"" align=""center""> </el-table-column>
            <el-table-column prop=""marital"" label=""婚姻状态"" width=""100"" align=""center""> </el-table-column>
            <el-table-column prop=""status"" label=""用户状态"" width=""100"" align=""center""> </el-table-column>
            <el-table-column prop=""level"" label=""用户等级"" width=""100"" align=""center""> </el-table-column>
            <el-table-column prop=""phone"" label=""手机号"" width=""100"" align=""center""> </el-table-column>
            <el-table-column prop=""login_ip"" label=""登录ip"" width=""100"" align=""center""> </el-table-column>
        ");
                WriteLiteral(@"    <el-table-column prop=""fail_count"" label=""登录失败次数"" width=""150"" align=""center""> </el-table-column>
            <el-table-column prop=""sex"" label=""性别"" width=""70"" align=""center""> </el-table-column>
            <el-table-column prop=""description"" label=""描述"" width=""100"" align=""center""> </el-table-column>
            <el-table-column prop=""email"" label=""邮箱"" width=""100"" align=""center""> </el-table-column>
            <el-table-column prop=""card_photo1"" label=""身份证正面"" width=""200"" align=""center"">
                <template slot-scope=""scope"">
                    <img v-if=""scope.row.card_photo1"" :src=""baseUrl+'img/'+scope.row.card_photo1"" align=""middle"" class=""avatar"">
                    <img v-else src=""https://cube.elemecdn.com/e/fd/0fc7d20532fdaf769a25683617711png.png"" class=""avatar"" />
                </template>
            </el-table-column>
            <el-table-column prop=""card_photo2"" label=""身份证反面"" width=""200"" align=""center"">
                <template slot-scope=""scope"">
                    <img");
                WriteLiteral(@" v-if=""scope.row.card_photo2"" :src=""baseUrl+'img/'+scope.row.card_photo2"" align=""middle"" class=""avatar"">
                    <img v-else src=""https://cube.elemecdn.com/e/fd/0fc7d20532fdaf769a25683617711png.png"" class=""avatar"" />
                </template>
            </el-table-column>
            <el-table-column prop=""hand_card_photo1"" label=""手持身份证正面"" width=""200"" align=""center"">
                <template slot-scope=""scope"">
                    <img v-if=""scope.row.hand_card_photo1"" :src=""baseUrl+'img/'+scope.row.hand_card_photo1"" align=""middle"" class=""avatar"">
                    <img v-else src=""https://cube.elemecdn.com/e/fd/0fc7d20532fdaf769a25683617711png.png"" class=""avatar"" />
                </template>
            </el-table-column>
            <el-table-column prop=""hand_card_photo2"" label=""手持身份证反面"" width=""200"" align=""center"">
                <template slot-scope=""scope"">
                    <img v-if=""scope.row.hand_card_photo2"" :src=""baseUrl+'img/'+scope.row.hand_card_photo2"" align=""m");
                WriteLiteral(@"iddle"" class=""avatar"">
                    <img v-else src=""https://cube.elemecdn.com/e/fd/0fc7d20532fdaf769a25683617711png.png"" class=""avatar"" />
                </template>
            </el-table-column>
            <el-table-column prop=""create_date"" label=""创建日期"" align=""center"" sortable width=""200"">
                <template slot-scope=""scope"">
                    <i class=""el-icon-time""></i>
                    <span style=""margin-left: 10px"">{{ scope.row.create_date }}</span>
                </template>
            </el-table-column>
            <el-table-column prop=""update_date"" label=""修改日期"" align=""center"" sortable width=""200"">
                <template slot-scope=""scope"">
                    <i class=""el-icon-time""></i>
                    <span style=""margin-left: 10px"">{{ scope.row.update_date }}</span>
                </template>
            </el-table-column>
            <el-table-column label=""操作"" width=""100"" align=""center"">
                <template slot-scope=""scope"">
        ");
                WriteLiteral("            <el-button ");
                WriteLiteral("@click=\"handleSelectClickEvent(scope.row)\" type=\"text\" icon=\"el-icon-view\" size=\"small\">查看</el-button>\r\n                    <el-button type=\"text\" ");
                WriteLiteral("@click=\"handleModifyClickEvent(scope.row)\" v-if=\"operator.modify\" icon=\"el-icon-edit\" size=\"small\">编辑</el-button>\r\n                    <el-button type=\"text\" ");
                WriteLiteral(@"@click=""handleDeleteClickEvent(scope.row)"" v-if=""operator.delete"" icon=""el-icon-delete"" size=""small"">删除</el-button>
                </template>
            </el-table-column>
        </el-table>
        <!-- 结束 列表信息 -->
        <!-- 开始 分页 -->
        <div class=""block"" style=""text-align:center;"">
            <el-pagination background ");
                WriteLiteral("@size-change=\"handleSizeChangeEvent\" ");
                WriteLiteral(@"@current-change=""handleCurrentPageChangeEvent"" :current-page=""page.current_page""
                           :page-sizes=""page.sizes"" :page-size=""page.size"" :page-count=""page.page"" layout=""total, sizes, prev, pager, next, jumper"" :total=""page.total"">
            </el-pagination>
        </div>
        <!-- 结束 分页 -->
        <!-- 开始 添加 修改 -->
        <el-dialog :title=""dialog.title"" :visible.sync=""dialog.visible"" width=""30%"" :before-close=""handleDialogClose"">
            <el-radio-group v-model=""labelPosition"" size=""small"">
                <el-radio-button label=""left"">左对齐</el-radio-button>
                <el-radio-button label=""right"">右对齐</el-radio-button>
                <el-radio-button label=""top"">顶部对齐</el-radio-button>
            </el-radio-group>
            <div style=""margin: 20px;""></div>
            <el-form :model=""formSubmit"" status-icon :rules=""formRoleValidator"" ref=""formSubmit"" :disabled=""disabled"" class=""demo-ruleForm"" :label-position=""labelPosition"" label-width=""80px"">
         ");
                WriteLiteral(@"       <el-input type=""hidden"" v-model=""formSubmit.id""></el-input>
                <el-form-item label=""账户"" prop=""account"">
                    <el-input v-model=""formSubmit.account""></el-input>
                </el-form-item>
                <el-form-item label=""昵称"" prop=""nick_name"">
                    <el-input v-model=""formSubmit.nick_name""></el-input>
                </el-form-item>
                <el-form-item label=""姓名"" prop=""real_name"">
                    <el-input v-model=""formSubmit.real_name""></el-input>
                </el-form-item>
                <el-form-item label=""头像"" prop=""head_pic.file_id"">
                    <el-upload class=""avatar-uploader"" accept=""image/jpeg,image/jpg,image/png,image/gif"" ref=""uploadHeadPic""
                               :action=""baseUrl+'img/upload'"" :data=""data_head_pic""
                               :show-file-list=""false""
                               :on-success=""handleHeadPicSuccess""
                               :before-upload=""beforeHeadP");
                WriteLiteral(@"icUpload"">
                        <img v-if=""formSubmit.head_pic.file_id"" :src=""baseUrl+'img/'+formSubmit.head_pic.file_id"" class=""avatar"">
                        <i v-else class=""el-icon-plus avatar-uploader-icon avatar""></i>
                    </el-upload>
                </el-form-item>
                <el-form-item label=""出生日期"" prop=""birthday"">
                    <el-col :span=""11"">
                        <el-date-picker type=""date"" placeholder=""选择日期"" v-model=""formSubmit.birthday"" value-format=""yyyy-MM-dd HH:mm:ss"" style=""width: 100%;""></el-date-picker>
                    </el-col>
                </el-form-item>
                <el-form-item label=""手机号码"" prop=""phone"">
                    <el-input v-model=""formSubmit.phone""></el-input>
                </el-form-item>
                <el-form-item label=""性别"" prop=""sex"">
                    <el-radio-group v-model=""formSubmit.sex"">
                        <el-radio label=""男""></el-radio>
                        <el-radio label=""女""></el");
                WriteLiteral("-radio>\r\n                    </el-radio-group>\r\n                </el-form-item>\r\n                <el-form-item label=\"学历分类\" prop=\"edution.id\">\r\n                    <el-select v-model=\"formSubmit.edution.id\" placeholder=\"请选择\" ");
                WriteLiteral("@change=\"handleEdutionCategoryChangeEvent\" ");
                WriteLiteral(@"@visible-change=""handleEdutionCategoryVisableChangeEvent"">
                        <el-option v-for=""it in edution_options"" :key=""it.id"" :label=""it.category"" :value=""it.id"">
                        </el-option>
                    </el-select>
                </el-form-item>
                <el-form-item label=""婚姻状态"" prop=""marital.id"">
                    <el-select v-model=""formSubmit.marital.id"" placeholder=""请选择"" ");
                WriteLiteral("@change=\"handleMaritalCategoryChangeEvent\" ");
                WriteLiteral(@"@visible-change=""handleMaritalCategoryVisableChangeEvent"">
                        <el-option v-for=""it in marital_options"" :key=""it.id"" :label=""it.category"" :value=""it.id"">
                        </el-option>
                    </el-select>
                </el-form-item>
                <el-form-item label=""邮箱"" prop=""email"">
                    <el-input type=""email"" v-model=""formSubmit.email""></el-input>
                </el-form-item>
                <el-form-item label=""身份证号"" prop=""card_id"">
                    <el-input type=""text"" v-model=""formSubmit.card_id""></el-input>
                </el-form-item>
                <el-form-item label=""身份证正面"" prop=""card_photo1.file_id"">
                    <el-upload class=""avatar-uploader"" accept=""image/jpeg,image/jpg,image/png,image/gif"" ref=""uploadCardPhoto1""
                               :action=""baseUrl+'img/upload'"" :data=""data_card_photo1""
                               :show-file-list=""false""
                               :on-success=""hand");
                WriteLiteral(@"leCardPhoto1Success""
                               :before-upload=""beforeCardPhoto1Upload"">
                        <img v-if=""formSubmit.card_photo1.file_id"" :src=""baseUrl+'img/'+formSubmit.card_photo1.file_id"" class=""avatar"">
                        <i v-else class=""el-icon-plus avatar-uploader-icon avatar""></i>
                    </el-upload>
                </el-form-item>
                <el-form-item label=""身份证反面面"" prop=""card_photo2.file_id"">
                    <el-upload class=""avatar-uploader"" accept=""image/jpeg,image/jpg,image/png,image/gif"" ref=""uploadCardPhoto2""
                               :action=""baseUrl+'img/upload'"" :data=""data_card_photo2""
                               :show-file-list=""false""
                               :on-success=""handleCardPhoto2Success""
                               :before-upload=""beforeCardPhoto2Upload"">
                        <img v-if=""formSubmit.card_photo2.file_id"" :src=""baseUrl+'img/'+formSubmit.card_photo2.file_id"" class=""avatar"">

       ");
                WriteLiteral(@"                 <i v-else class=""el-icon-plus avatar-uploader-icon avatar""></i>
                    </el-upload>
                </el-form-item>
                <el-form-item label=""手持身份证正面"" prop=""hand_card_photo1.file_id"">
                    <el-upload class=""avatar-uploader"" accept=""image/jpeg,image/jpg,image/png,image/gif"" ref=""uploadHandCardPhoto1""
                               :action=""baseUrl+'img/upload'"" :data=""data_hand_card_photo1""
                               :show-file-list=""false""
                               :on-success=""handleHandCardPhoto1Success""
                               :before-upload=""beforeHandCardPhoto1Upload"">
                        <img v-if=""formSubmit.hand_card_photo1.file_id"" :src=""baseUrl+'img/'+formSubmit.hand_card_photo1.file_id"" class=""avatar"">
                        <i v-else class=""el-icon-plus avatar-uploader-icon avatar""></i>
                    </el-upload>
                </el-form-item>
                <el-form-item label=""手持身份证反面面"" prop=""hand_c");
                WriteLiteral(@"ard_photo2.file_id"">
                    <el-upload class=""avatar-uploader"" accept=""image/jpeg,image/jpg,image/png,image/gif"" ref=""uploadHandCardPhoto2""
                               :action=""baseUrl+'img/upload'"" :data=""data_hand_card_photo2""
                               :show-file-list=""false""
                               :on-success=""handleHandCardPhoto2Success""
                               :before-upload=""beforeHandCardPhoto2Upload"">
                        <img v-if=""formSubmit.hand_card_photo2.file_id"" :src=""baseUrl+'img/'+formSubmit.hand_card_photo2.file_id"" class=""avatar"">
                        <i v-else class=""el-icon-plus avatar-uploader-icon avatar""></i>
                    </el-upload>
                </el-form-item>
                <el-form-item label=""银行卡号"" prop=""bank_id"">
                    <el-input type=""text"" v-model=""formSubmit.bank_id""></el-input>
                </el-form-item>
                <el-form-item label=""用户等级分类"" prop=""level.id"">
                    <el-se");
                WriteLiteral("lect v-model=\"formSubmit.level.id\" placeholder=\"请选择\" ");
                WriteLiteral("@change=\"handleLevelCategoryChangeEvent\" ");
                WriteLiteral(@"@visible-change=""handleLevelCategoryVisableChangeEvent"">
                        <el-option v-for=""it in level_options"" :key=""it.id"" :label=""it.category"" :value=""it.id"">
                        </el-option>
                    </el-select>
                </el-form-item>
                <el-form-item label=""描述"" prop=""description"">
                    <el-input type=""textarea"" v-model=""formSubmit.description"" value=""这个人很懒,什么也没留下!""></el-input>
                </el-form-item>
                <el-form-item label=""密码"" prop=""password"">
                    <el-input type=""password"" v-model=""formSubmit.password""></el-input>
                </el-form-item>
                <el-form-item label=""确认密码"" prop=""enter_password"">
                    <el-input type=""password"" v-model=""formSubmit.enter_password""></el-input>
                </el-form-item>
                <el-form-item>
                    <el-button type=""primary"" ");
                WriteLiteral("@click=\"submitFormEvent(\'formSubmit\')\">{{dialog.submitText}}</el-button>\r\n                    <el-button ");
                WriteLiteral(@"@click=""resetFormEvent('formSubmit')"">{{dialog.resetText}}</el-button>
                </el-form-item>
            </el-form>
        </el-dialog>
        <!-- 结束 添加 修改 -->

    </div>
    <!-- import Vue before Element -->
    <script src=""https://unpkg.com/vue/dist/vue.js""></script>
    <!-- import JavaScript -->
    <script src=""https://unpkg.com/element-ui/lib/index.js""></script>
    <script src=""https://unpkg.com/axios/dist/axios.min.js""></script>
    <script src=""/js/js.cookie.js""></script>
    <script src=""/js/index.js""></script>
    <script>
        var obj = new Gibson();
        obj.el = "".user_list"";
        obj.data.data_head_pic = { type: 'head_pic' };
        obj.data.data_card_photo1 = { type: 'card_photo1' };
        obj.data.data_card_photo2 = { type: 'card_photo2' };
        obj.data.data_hand_card_photo1 = { type: 'hand_card_photo1' };
        obj.data.data_hand_card_photo2 = { type: 'hand_card_photo2' };
        obj.data.controller = ""user"";
        obj.data.isOperat");
                WriteLiteral(@"orRequest = true;
        obj.data.operatorUrl = { add: urls.user.add, modify: urls.user.edit, delete: urls.user.delete, query: urls.user.query };
        obj.data.formQuery = {
            id: '', token: '', account: '', nick_name: '', birthday_date: [], card_id: '', real_name: '', phone: '', sex: '', email: '', bank_id: '', status_id: '',
            login_ip: '', level_id: '', login_date: [], create_date: [], update_date: []
        };
        obj.data.old_pwd = '';
        obj.data.formSubmit = {
            id: '', account: '', nick_name: '', real_name: '', head_pic: { file_id: '' },
            birthday: '', phone: '', sex: '', email: '', card_id: '', bank_id: '',
            card_photo1: { file_id: '' }, card_photo2: { file_id: '' }, hand_card_photo1: { file_id: '' }, hand_card_photo2: { file_id: '' },
            description: '这个人很懒,什么也没留下!', password: '', enter_password: '',
            edution: { id: '' }, marital: { id: '' }, level: { id: '' }
        };
        obj.data.formRoleValid");
                WriteLiteral(@"ator = {
            account: [
                { required: true, message: '请输入账户', trigger: 'blur' },
                { min: 5, max: 15, message: '请输入长度在 5 到 15 个字符账户', trigger: 'blur' }
            ],
            nick_name: [
                { required: true, message: '请输入昵称', trigger: 'blur' },
                { min: 2, max: 10, message: '请输入长度在 2 到 10 个字符昵称', trigger: 'blur' }
            ],
            real_name: [
                { required: true, message: '请输入姓名', trigger: 'blur' },
                { min: 2, max: 10, message: '长度在 2 到 10 个字符姓名', trigger: 'blur' }
            ],
            head_pic: {
                file_id: [
                    { required: true, message: '请上传头像', trigger: 'change' }
                ]
            },
            //https://blog.csdn.net/weixin_39897287/article/details/94442776
            birthday: { /*type: 'date',*/ required: true, message: '请选择日期', trigger: 'change' },
            phone: [
                { required: true, message: '请输入手机号', tri");
                WriteLiteral(@"gger: 'blur' },
                { min: 11, max: 11, message: '长度在 11 个数字手机号', trigger: 'blur' }
            ],
            sex: { required: true, message: '请选择性别', trigger: 'change' },
            edution: {
                id:
                    { required: true, message: '请选择学历', trigger: 'change' }
            }, marital: {
                id:
                    { required: true, message: '请选择婚姻状态', trigger: 'change' }
            },
            email: [
                { required: true, type: 'email', message: '请输入邮箱', trigger: 'blur' },
                { min: 10, max: 20, message: '长度在 10 到 20 个字符邮箱', trigger: 'blur' }
            ], card_id: [
                { required: true, message: '请输入身份证号', trigger: 'blur' },
                { min: 17, max: 18, message: '请输入长度在 17 到 18 个字符身份证号', trigger: 'blur' }
            ],
            card_photo1: { file_id: { required: true, message: '请上传身份证正面', trigger: 'change' } },
            card_photo2: { file_id: { required: true, message: '请上传身份证");
                WriteLiteral(@"反面', trigger: 'change' } },
            hand_card_photo1: { file_id: { required: true, message: '请上传手持身份证正面', trigger: 'change' } },
            hand_card_photo2: { file_id: { required: true, message: '请上传手持身份证反面', trigger: 'change' } },
            bank_id: [
                { required: true, message: '请输入银行卡号', trigger: 'blur' },
                { min: 20, max: 20, message: '请输入长度在 20 位数字银行卡号', trigger: 'blur' }
            ],
            description: [
                { required: true, message: '请输入描述', trigger: 'blur' },
                { min: 10, max: 500, message: '长度在 10 到 500 个字符描述', trigger: 'blur' }
            ],
            level: { id: { required: true, message: '请选择用户等级', trigger: 'change' } },
            password: [
                {
                    validator: (rule, value, callback) => {
                        if (!value) {
                            callback(new Error('请输入密码'));
                        }
                        else if (obj.data.old_pwd != value && (v");
                WriteLiteral(@"alue.length < 6 || value.length > 20)) {
                            callback(new Error('长度在 6 到 20 个字符'));
                        }
                        else if (value.length < 6) {
                            callback(new Error('长度在 6 个字符以上'));
                        } else {
                            callback();
                        }
                    }, trigger: 'blur'
                }
            ],
            enter_password: [
                {
                    validator: (rule, value, callback) => {
                        if (!value) {
                            callback(new Error('请输入确认密码'));
                        }
                        else if (obj.data.old_pwd != value && (value.length < 6 || value.length > 20)) {
                            callback(new Error('长度在 6 到 20 个字符'));
                        }
                        else if (value.length < 6) {
                            callback(new Error('长度在 6 个字符以上'));
                        }
      ");
                WriteLiteral(@"                  else if (obj.data.formSubmit.password !== value) {
                            callback(new Error('两次输入密码不一致!'));
                        } else {
                            callback();
                        }
                    }, trigger: 'blur'
                }
            ]
        };
        //覆盖此方法 重写
        obj.methods.loadMounted = function () {
            this.queryCategoryEvent();
            this.queryEdutionEvent();
            this.queryMaritalEvent();
            this.queryLevelEvent();
            this.queryStatusEvent();

        };
        //取消其他操作
        obj.methods.quitOtherOperatorEvent = function () {
            this.$refs.uploadHeadPic.abort();
            this.$refs.uploadCardPhoto1.abort();
            this.$refs.uploadCardPhoto2.abort();
            this.$refs.uploadHandCardPhoto1.abort();
            this.$refs.uploadHandCardPhoto2.abort();
        };
        function setEdution(obj) {
            obj.data.edution_options = [];
 ");
                WriteLiteral(@"           obj.methods.queryEdutionEvent = function () {
                var $this = this;
                get(urls.edutioncategory.category, response => { $this.edution_options = response.data.data; });
            };
            obj.methods.handleEdutionCategoryChangeEvent = function (val) {
                if (this.dialog.visiable) {
                    this.formSubmit.edution.id = val;
                }
                else {
                    this.formQuery.edution_id = val;
                }
            };
            obj.methods.handleEdutionCategoryVisableChangeEvent = function (val) {
                if (val) this.queryEdutionEvent();
            };
        }
        setEdution(obj);
        function setMarital(obj) {
            obj.data.marital_options = [];
            obj.methods.queryMaritalEvent = function () {
                var $this = this;
                get(urls.usermaritalstatus.category, response => { $this.marital_options = response.data.data; });
            }");
                WriteLiteral(@";
            obj.methods.handleMaritalCategoryChangeEvent = function (val) {
                if (this.dialog.visiable) {
                    this.formSubmit.marital.id = val;
                }
                else {
                    this.formQuery.marital_id = val;
                }
            };
            obj.methods.handleMaritalCategoryVisableChangeEvent = function (val) {
                if (val) this.queryMaritalEvent();
            };
        }
        setMarital(obj);
        function setLevel(obj) {
            obj.data.level_options = [];
            obj.methods.queryLevelEvent = function () {
                var $this = this;
                get(urls.userlevel.category, response => { $this.level_options = response.data.data; });
            };
            obj.methods.handleLevelCategoryChangeEvent = function (val) {
                if (this.dialog.visiable) {
                    this.formSubmit.level.id = val;
                }
                else {
                 ");
                WriteLiteral(@"   this.formQuery.level_id = val;
                }
            };
            obj.methods.handleLevelCategoryVisableChangeEvent = function (val) {
                if (val) this.queryLevelEvent();
            };
        }
        setLevel(obj);
        function setStatus(obj) {
            obj.data.status_options = [];
            obj.methods.queryStatusEvent = function () {
                var $this = this;
                get(urls.userstatus.category, response => { $this.status_options = response.data.data; });
            };
            obj.methods.handleStatusCategoryChangeEvent = function (val) {
                this.formQuery.status_id = val;
            };
            obj.methods.handleStatusCategoryVisableChangeEvent = function (val) {
                if (val) this.queryStatusEvent();
            };
        }
        setStatus(obj);
        //文件上传操作
        obj.methods.handleRemove = function (file, fileList) {
            console.log(file, fileList);
        };
        obj.m");
                WriteLiteral(@"ethods.handlePictureCardPreview = function (file) {
            console.log(file);
        };
        obj.methods.handleHeadPicSuccess = function (res, file) {
            this.formSubmit.head_pic.file_id = res.data.id;
        };
        obj.methods.beforeHeadPicUpload = function (file) {
            const isJPG = file.type === 'image/jpeg' || file.type === 'image/png' || file.type === 'image/jpg' || file.type === 'image/gif';
            const isLt2M = file.size / 1024 / 1024 < 2;

            if (!isJPG) {
                this.$message.error('上传头像图片只能是 JPG 格式!');
            }
            if (!isLt2M) {
                this.$message.error('上传头像图片大小不能超过 2MB!');
            }
            return isJPG && isLt2M;
        };
        obj.methods.handleCardPhoto1Success = function (res, file) {
            this.formSubmit.card_photo1.file_id = res.data.id;
        };
        obj.methods.beforeCardPhoto1Upload = function (file) {
            return true;
        };
        obj.methods.handl");
                WriteLiteral(@"eCardPhoto2Success = function (res, file) {
            this.formSubmit.card_photo2.file_id = res.data.id;
        };
        obj.methods.beforeCardPhoto2Upload = function (file) {
            return true;
        };
        obj.methods.handleHandCardPhoto1Success = function (res, file) {
            this.formSubmit.hand_card_photo1.file_id = res.data.id;
        };
        obj.methods.beforeHandCardPhoto1Upload = function (file) {
            return true;
        };
        obj.methods.handleHandCardPhoto2Success = function (res, file) {
            this.formSubmit.hand_card_photo2.file_id = res.data.id;
        };
        obj.methods.beforeHandCardPhoto2Upload = function (file) {
            return true;
        };
        //覆盖此方法 重写
        obj.methods.submitTextSelectChanngeEevent = function () {
            this.dialog.title = ""查看用户信息"";
            this.dialog.submitText = ""预览用户信息"";
            this.disabled = true;
        };
        //覆盖此方法 重写
        obj.methods.submitTextModi");
                WriteLiteral(@"fyChanngeEevent = function () {
            this.dialog.title = ""编辑用户信息"";
            this.dialog.submitText = ""立即编辑"";
            this.disabled = false;
        };
        //覆盖此方法 重写
        obj.methods.submitTextInsertChanngeEevent = function () {
            this.dialog.title = ""添加用户信息"";
            this.dialog.submitText = ""立即创建"";
            this.disabled = false;
            this.old_pwd = '';
        };
        //覆盖此方法 重写
        obj.methods.setValue = function (row) {
            for (var obj in this.formSubmit) {
                if (obj.toString() == 'role' && row.role) {
                    this.formSubmit[obj].id = row.role.id;
                    continue;
                } else if (obj.toString() == 'head_pic' || obj.toString() == 'card_photo1' ||
                    obj.toString() == 'card_photo2' || obj.toString() == 'hand_card_photo1' || obj.toString() == 'hand_card_photo2') {
                    if (row[obj])
                        this.formSubmit[obj].file_id = row[obj]");
                WriteLiteral(@";
                    continue;
                }
                else if (obj == ""status"" || obj == ""marital"" || obj == ""edution"" || obj == ""level"") continue;
                else this.formSubmit[obj] = row[obj];
            }
            this.formSubmit.enter_password = this.formSubmit[""password""];
            this.old_pwd = this.formSubmit[""password""];
            //if (row.status) this.formSubmit.status.id = getId(row.status, this.status_options);
            if (row.marital) this.formSubmit.marital.id = getId(row.marital, this.marital_options);
            if (row.edution) this.formSubmit.edution.id = getId(row.edution, this.edution_options);
            if (row.level) this.formSubmit.level.id = getId(row.level, this.level_options);
        };
        function getId(val, options) {
            for (var item in options) {
                if (options[item].category == val) return options[item].id;
            }
            return undefined;
        }
        new Vue(obj);
    </script>");
                WriteLiteral("\n\r\n");
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n</html>\r\n");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
