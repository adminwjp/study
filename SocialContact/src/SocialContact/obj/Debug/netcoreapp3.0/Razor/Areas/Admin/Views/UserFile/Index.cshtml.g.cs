#pragma checksum "E:\work\program\SocialContact\src\SocialContact\Areas\Admin\Views\UserFile\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "dca94c8656bc671426449d0bdd7dfebbaab62bbf"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Areas_Admin_Views_UserFile_Index), @"mvc.1.0.view", @"/Areas/Admin/Views/UserFile/Index.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"dca94c8656bc671426449d0bdd7dfebbaab62bbf", @"/Areas/Admin/Views/UserFile/Index.cshtml")]
    public class Areas_Admin_Views_UserFile_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper;
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral("<!DOCTYPE html>\r\n\r\n<html>\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("head", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "dca94c8656bc671426449d0bdd7dfebbaab62bbf2783", async() => {
                WriteLiteral(@"
    <meta charset=""utf-8"">
    <meta http-equiv=""X-UA-Compatible"" content=""IE=edge,chrome=1"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no"">
    <link rel=""icon"" href=""/favicon.ico"">
    <title>文件列表</title>
    <!-- 引入样式 -->
    <link rel=""stylesheet"" href=""https://unpkg.com/element-ui/lib/theme-chalk/index.css"">
    <style>
        .demo-form-inline {
            margin: 0px 70px;
            text-align: left;
        }   .avatar-uploader .el-upload {
            border: 1px dashed #d9d9d9;
            border-radius: 6px;
            cursor: pointer;
            position: relative;
            overflow: hidden;
        }

            .avatar-uploader .el-upload:hover {
                border-color: #409EFF;
            }

        .avatar-uploader-icon {
            font-size: 28px;
            color: #8c939d;
            width: 178px;
            height: 178px;
            line-height: 178px;
            text-align: c");
                WriteLiteral("enter;\r\n        }\r\n        .avatar {\r\n            width: 178px;\r\n            height: 178px;\r\n            display: block;\r\n        }\r\n    </style>\r\n");
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("body", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "dca94c8656bc671426449d0bdd7dfebbaab62bbf4986", async() => {
                WriteLiteral(@"
    <div class=""file_list"">
        <!-- 开始查询信息 -->
        <el-form :inline=""true"" :model=""formQuery"" ref=""formQuery"" class=""demo-form-inline "">
            <el-form-item label=""编号"" prop=""id"">
                <el-select v-model=""formQuery.id"" placeholder=""请选择"" ");
                WriteLiteral("@change=\"handleCategoryQueryChangeEvent\" ");
                WriteLiteral(@"@visible-change=""handleCategoryQueryVisableChangeEvent"">
                    <el-option v-for=""it in options"" :key=""it.id"" :label=""it.category"" :value=""it.id"">
                    </el-option>
                </el-select>
            </el-form-item>
            <el-form-item label=""文件路劲"" prop=""src"">
                <el-input v-model=""formQuery.src"" placeholder=""文件路劲""></el-input>
            </el-form-item>
            <el-form-item label=""文件分类"" prop=""category_id"">
                <el-select v-model=""formQuery.category_id"" placeholder=""请选择"" ");
                WriteLiteral("@change=\"handleFileCategoryQueryChangeEvent\" ");
                WriteLiteral(@"@visible-change=""handleFileCategoryVisableChangeEvent"">
                    <el-option v-for=""it in category_options"" :key=""it.id"" :label=""it.category"" :value=""it.id"">
                    </el-option>
                </el-select>
            </el-form-item>
            <el-form-item label=""创建时间范围"" prop=""create_date"">
                <el-date-picker v-model=""formQuery.create_date"" type=""datetimerange"" value-format=""yyyy-MM-dd HH:mm:ss"" :picker-options=""createDatePickerOptions""
                                range-separator=""至"" start-placeholder=""开始日期"" align=""right"">
                </el-date-picker>
            </el-form-item>
            <el-form-item label=""修改时间范围"" prop=""update_date"">
                <el-date-picker v-model=""formQuery.update_date"" type=""datetimerange"" value-format=""yyyy-MM-dd HH:mm:ss"" :picker-options=""createDatePickerOptions"" range-separator=""至"" start-placeholder=""开始日期""
                                end-placeholder=""结束日期"" align=""right"">
                </el-date-picker>
   ");
                WriteLiteral("         </el-form-item>\r\n            <el-form-item>\r\n                <el-button type=\"primary\" ");
                WriteLiteral("@click=\"loadTableDataOrQueryDataEvent\">查询</el-button>\r\n                <el-button ");
                WriteLiteral("@click=\"resetFormEvent(\'formQuery\')\">重置</el-button>\r\n            </el-form-item>\r\n        </el-form>\r\n        <!-- 结束查询信息 -->\r\n        <!-- 开始 操作按钮 -->\r\n        <div style=\"margin-top: 20px;text-align:left;margin-bottom:10px\">\r\n            <el-button ");
                WriteLiteral("@click=\"toggleSelectionTableCheckBoxButtonEvent(checkboxAllSelect?tableData:null)\">{{checkboxAllSelectText}}</el-button>\r\n            <el-button ");
                WriteLiteral("@click=\"insertButtonClickEvent\" v-if=\"operator.add\" icon=\"el-icon-plus\">添加</el-button>\r\n            <el-button ");
                WriteLiteral("@click=\"modifyButtonClickEvent\" v-if=\"operator.modify\" icon=\"el-icon-edit\">编辑</el-button>\r\n            <el-button ");
                WriteLiteral("@click=\"deleteButtonClickEvent\" v-if=\"operator.delete\" icon=\"el-icon-delete\">删除</el-button>\r\n            <el-button ");
                WriteLiteral("@click=\"queryButtonClickEvent\" icon=\"el-icon-view\">查看</el-button>\r\n            <el-button ");
                WriteLiteral(@"@click=""loadTableDataOrQueryDataEvent"" icon=""el-icon-refresh"">刷新</el-button>
        </div>
        <!-- 结束 操作按钮 -->
        <!-- 开始 列表信息 -->
        <el-table v-loading=""loading"" element-loading-spinner=""el-icon-loading"" element-loading-background=""rgba(0, 0, 0, 0.8)"" ref=""multipleTable"" :data=""tableData"" tooltip-effect=""dark"" style=""width: 100%""
                  highlight-current-row border ");
                WriteLiteral(@"@selection-change=""handleSelectionChange"" :default-sort=""{prop: 'create_date', order: 'descending'}"">
            <el-table-column type=""selection"" width=""55""> </el-table-column>
            <el-table-column type=""index"" width=""50"" sortable label=""序号"" align=""center""> </el-table-column>
            <el-table-column prop=""id"" label=""编号"" sortable width=""70"" align=""center"">  </el-table-column>
            <el-table-column prop=""src"" label=""文件路劲"" width=""100"" align=""center""> </el-table-column>
            <el-table-column prop=""file_id"" label=""文件展示"" width=""120"" align=""center"">
                <template slot-scope=""scope"">
                    <img v-if=""scope.row.file_id"" style=""border-radius:50%;width:80px;height:80px;vertical-align:middle;"" :src=""baseUrl+'file/get/'+scope.row.file_id"">
                    <img v-else style=""border-radius:50%;width:80px;height:80px;vertical-align:middle;"" src=""https://cube.elemecdn.com/e/fd/0fc7d20532fdaf769a25683617711png.png"" />
                </template>
            <");
                WriteLiteral(@"/el-table-column>
            <el-table-column prop=""description"" label=""文件描述"" width=""200"" align=""center""> </el-table-column>
            <el-table-column prop=""category"" label=""文件分类信息"" width=""440"" resizable align=""center"">
                <el-table-column prop=""category.id"" label=""编号"" width=""60"" align=""center""> </el-table-column>
                <el-table-column prop=""category.category"" label=""名称"" width=""80"" align=""center""> </el-table-column>
                <el-table-column prop=""category.accept"" label=""类型"" width=""80"" align=""center""> </el-table-column>
                <el-table-column prop=""category.description"" label=""描述"" width=""200"" align=""center""> </el-table-column>
            </el-table-column>
            <el-table-column prop=""create_date"" label=""创建日期"" align=""center"" sortable width=""200"">
                <template slot-scope=""scope"">
                    <i class=""el-icon-time""></i>
                    <span style=""margin-left: 10px"">{{ scope.row.create_date }}</span>
                </tem");
                WriteLiteral(@"plate>
            </el-table-column>
            <el-table-column prop=""update_date"" label=""修改日期"" align=""center"" sortable width=""200"">
                <template slot-scope=""scope"">
                    <i class=""el-icon-time""></i>
                    <span style=""margin-left: 10px"">{{ scope.row.update_date }}</span>
                </template>
            </el-table-column>
            <el-table-column label=""操作"" width=""200"">
                <template slot-scope=""scope"">
                    <el-button ");
                WriteLiteral("@click=\"handleSelectClickEvent(scope.row)\" type=\"text\" icon=\"el-icon-view\" size=\"small\">查看</el-button>\r\n                    <el-button type=\"text\" ");
                WriteLiteral("@click=\"handleModifyClickEvent(scope.row)\" v-if=\"operator.modify\" icon=\"el-icon-edit\" size=\"small\">编辑</el-button>\r\n                    <el-button type=\"text\" ");
                WriteLiteral(@"@click=""handleDeleteClickEvent(scope.row)"" v-if=""operator.delete"" icon=""el-icon-delete"" size=""small"">删除</el-button>
                </template>
            </el-table-column>
        </el-table>
        <!-- 结束 列表信息 -->
        <!-- 开始 分页 -->
        <div class=""block"" style=""text-align:center;"">
            <el-pagination background ");
                WriteLiteral("@size-change=\"handleSizeChangeEvent\" ");
                WriteLiteral(@"@current-change=""handleCurrentPageChangeEvent"" :current-page=""page.current_page""
                           :page-sizes=""page.sizes"" :page-size=""page.size"" :page-count=""page.page"" layout=""total, sizes, prev, pager, next, jumper"" :total=""page.total"">
            </el-pagination>
        </div>
        <!-- 结束 分页 -->
        <!-- 开始 添加 修改 -->
        <el-dialog :title=""dialog.title"" :visible.sync=""dialog.visible"" width=""30%"" :before-close=""handleDialogClose"">
            <el-radio-group v-model=""labelPosition"" size=""small"">
                <el-radio-button label=""left"">左对齐</el-radio-button>
                <el-radio-button label=""right"">右对齐</el-radio-button>
                <el-radio-button label=""top"">顶部对齐</el-radio-button>
            </el-radio-group>
            <div style=""margin: 20px;""></div>
            <el-form :model=""formSubmit"" status-icon :rules=""formRoleValidator"" ref=""formSubmit"" class=""demo-ruleForm"" :disabled=""disabled"" :label-position=""labelPosition"" label-width=""80px"">
         ");
                WriteLiteral(@"       <el-input type=""hidden"" v-model=""formSubmit.id""></el-input>
                <el-form-item label=""文件信息"" prop=""src"">
                    <el-upload class=""avatar-uploader"" ref=""upload"" :auto-upload=""false"" :data=""formSubmit""
                               :show-file-list=""false"" :action=""submit_url"" :http-request=""upload""
                               :on-change=""handleUploadSuccess"">
                        <img v-if=""file"" :src=""file"" class=""avatar"">
");
                WriteLiteral(@"                        <i v-else class=""el-icon-plus avatar-uploader-icon avatar""></i>
                    </el-upload>
                </el-form-item>
                <template v-if=""test"">
                    <el-form-item label=""管理员"" prop=""admin.id"">
                        <el-select v-model=""formSubmit.admin.id"" filterable placeholder=""请选择"" ");
                WriteLiteral("@change=\"handleAdminChangeEvent\" ");
                WriteLiteral(@"@visible-change=""handleAdminVisableChangeEvent"">
                            <el-option v-for=""item in admin_options"" :key=""item.id""
                                       :label=""item.category"" :value=""item.id"">
                            </el-option>
                        </el-select>
                    </el-form-item>
                </template>
                <el-form-item label=""文件分类"" prop=""category.id"">
                    <el-select v-model=""formSubmit.category.id"" placeholder=""请选择"" ");
                WriteLiteral("@change=\"handleFileCategoryFormChangeEvent\" ");
                WriteLiteral(@"@visible-change=""handleFileCategoryVisableChangeEvent"">
                        <el-option v-for=""it in category_options"" :key=""it.id"" :label=""it.category"" :value=""it.id"">
                        </el-option>
                    </el-select>
                </el-form-item>
                <el-form-item label=""描述"" prop=""description"">
                    <el-input type=""textarea"" v-model=""formSubmit.description"" value=""这个人很懒,什么也没留下!""></el-input>
                </el-form-item>
                <el-form-item>
                    <el-button type=""primary"" ");
                WriteLiteral("@click=\"submitFormEvent(\'formSubmit\')\">{{dialog.submitText}}</el-button>\r\n                    <el-button ");
                WriteLiteral(@"@click=""resetFormEvent('formSubmit')"">{{dialog.resetText}}</el-button>
                </el-form-item>
            </el-form>
        </el-dialog>
        <!-- 结束 添加 修改 -->

    </div>
    <!-- import Vue before Element -->
    <script src=""https://unpkg.com/vue/dist/vue.js""></script>
    <!-- import JavaScript -->
    <script src=""https://unpkg.com/element-ui/lib/index.js""></script>
    <script src=""https://unpkg.com/axios/dist/axios.min.js""></script>
    <script src=""/js/js.cookie.js""></script>
    <script src=""/js/index.js""></script>
    <script>
        var obj = new Gibson();
        obj.el = "".file_list"";
        obj.data.operatorUrl = { add: urls.file.add, modify: urls.file.edit, delete: urls.file.delete, query: urls.file.query };
        obj.data.formQuery = { id: '', category_id: '', src: '', create_date: [], update_date: [] };
        obj.data.formSubmit = { id: '', category: { id: '' }, src: '', description: '这个人很懒,什么也没留下!' };
        obj.data.category_options = [];
        obj");
                WriteLiteral(@".data.controller = ""file"";
        obj.data.fileInfo = null;
        obj.data.isOperatorRequest = true;
        obj.data.formRoleValidator = {
            file_category: {
                id: [
                    { required: true, message: '请选择文件分类', trigger: ['blur', 'channge'] }
                ]
            },
            description: [
                { required: true, message: '请输入文件描述', trigger: 'blur' },
                { min: 10, max: 500, message: '长度在 10 到 500 个字符文件描述', trigger: 'blur' }
            ]
        };
        //自定义上传操作
        obj.methods.upload = function (file) {
            var paramOptions = parseRequestParam(3, this.formSubmit);
            if (file) {
                paramOptions.parem.append(""file"", file.raw ? file.raw : file.file ? file.file : file);
                this.fileInfo = null;
            }
            var $this = this;
            post(this.submit_url, paramOptions.parem, paramOptions.contenType, response => {
                if (response.data.s");
                WriteLiteral(@"uccess) {
                    $this.$nextTick(() => {
                        $this.dialog.visible = false;
                        $this.loadTableDataOrQueryDataEvent(); // 重新加载列表数据
                        $this.reload();
                    });
                }
            }, (response) => { $this.tip(response.data.message, ""提示："", ""确定"", ""info"", ""确定!"", ""关闭!""); });
        };
        //提交表单事件 添加或编辑按钮提交事件
        obj.methods.submitFormEvent = function (formName) {
            this.$refs[formName].validate((valid) => {
                if (valid) {
                    this.upload(this.fileInfo);
                    //var img = this.file;
                    //var image = new Image();
                    //image.crossOrigin = ""anonymous""; //关键
                    //image.src = img;
                    //var $this = this;
                    //image.onload = function () {
                    //    //这样就获取到了文件的Base64字符串
                    //    var base64 = getBase64Image(image);
           ");
                WriteLiteral(@"         //    //Base64字符串转二进制
                    //    //var file = dataURLtoBlob(base64);
                    //    var file = dataURLtoFile(base64, $this.file_name);
                    //    $this.upload(file);
                    //}
                    return true;
                } else {
                    console.log('error submit!!');
                    return false;
                }
            });
        };
        //文件上传操作
        obj.data.submit_url = obj.data.baseUrl+""file/upload"";
        obj.data.file = """";
        obj.data.fileChange = """";
        obj.data.file_name = """";
        obj.methods.handleUploadSuccess = function (file) {
            var $this = this;
            this.fileInfo = file;
            this.file_name = file.name;
            if (window.createObjectURL != undefined) {
                $this.file = window.createObjectURL(file.raw);
            }
            else if (window.URL != undefined) {
                $this.file = window.URL.createObjectU");
                WriteLiteral(@"RL(file.raw);
            }
            else if (window.webkitURL != undefined) {
                $this.file = window.webkitURL.createObjectURL(file.raw);
            }
        };
        //覆盖此方法 重写
        obj.methods.loadMounted = function () {
            this.fileCategoryQueryEvent();
            if (this.test) this.adminCategoryQueryEvent();
            this.queryCategoryEvent();
        };
        obj.methods.reload = function () {
            this.queryCategoryEvent();
        };

        //测试用的
        setAdmin(obj);
        //查询文件分类信息
        obj.methods.fileCategoryQueryEvent = function () {
            var $this = this;
            get(urls.filecategory.category, response => {
                $this.category_options = response.data.data;
            });
        };
        //下拉框选项值改变事件
        obj.methods.handleFileCategoryQueryChangeEvent = function (value) {
            this.formQuery.category_id = value;
        };
        //下拉框选项值改变事件
        obj.methods.handleFileCa");
                WriteLiteral(@"tegoryFormChangeEvent = function (value) {
            this.formSubmit.category.id = value;
        };
        //下拉框显示隐藏改变事件
        obj.methods.handleFileCategoryVisableChangeEvent = function (visable) {
            if (visable) {
                this.fileCategoryQueryEvent();
            }
        };
        //覆盖此方法 重写
        obj.methods.submitTextSelectChanngeEevent = function () {
            this.dialog.title = ""查看文件信息"";
            this.dialog.submitText = ""预览文件信息"";
            this.disabled = true;
        };
        //覆盖此方法 重写
        obj.methods.submitTextModifyChanngeEevent = function () {
            this.dialog.title = ""编辑文件信息"";
            this.dialog.submitText = ""立即编辑"";
            this.submit_url = urls.file.edit;
            this.disabled = false;
        };
        //覆盖此方法 重写
        obj.methods.submitTextInsertChanngeEevent = function () {
            this.dialog.title = ""添加文件信息"";
            this.dialog.submitText = ""立即创建"";
            this.submit_url = urls.file");
                WriteLiteral(@".add;
            this.file = """";
            this.file_name = """";
            this.disabled = false;
        };
        //覆盖此方法 重写
        obj.methods.setValue = function (row) {
            for (var obj in this.formSubmit) {
                if (obj.toString() == 'admin' || obj.toString() == 'user' || obj.toString() == 'category') {
                    continue;
                }
                if (row[obj]) this.formSubmit[obj] = row[obj];
            }
            if (this.test && row.admin) this.formSubmit[""admin""].id = row[""admin""].id;
            if (row[""category""]) this.formSubmit[""category""].id = row[""category""].id;
            if (row.file_id) {
                this.file = this.baseUrl+""file/get/"" + row.file_id;
                this.file_name = row.src;
                this.formSubmit[""src""] = row.file_id;
            }
        };
        new Vue(obj);
    </script>

");
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n</html>\r\n");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
